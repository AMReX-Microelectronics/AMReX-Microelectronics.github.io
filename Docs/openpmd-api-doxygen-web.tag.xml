<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="class">
    <name>openPMD::AbstractFilePosition</name>
    <filename>classopen_p_m_d_1_1_abstract_file_position.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::AbstractIOHandler</name>
    <filename>classopen_p_m_d_1_1_abstract_i_o_handler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enqueue</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler.html</anchorfile>
      <anchor>af0b10be5de462efba3e4b22e43a48dc8</anchor>
      <arglist>(IOTask const &amp;iotask)</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>flush</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler.html</anchorfile>
      <anchor>aca17f1952017c9cb26f0143de6d6f041</anchor>
      <arglist>(internal::FlushParams const &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::future&lt; void &gt;</type>
      <name>flush</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler.html</anchorfile>
      <anchor>aacebae788ae698e5f1492749d0511a2c</anchor>
      <arglist>(internal::ParsedFlushParams &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>backendName</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler.html</anchorfile>
      <anchor>addb91193aced4116efddc155bc2e5091</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_lastFlushSuccessful</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler.html</anchorfile>
      <anchor>acd8884527012cff954a016d571ac97bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::AbstractIOHandlerImpl</name>
    <filename>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>closeFile</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>aae81455a482ab0a5751cb9de9b9e34ba</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CLOSE_FILE &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>checkFile</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a6fd94f7c425798b0e91746b7a1e9303f</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CHECK_FILE &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>advance</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a240b7a9595cd81805ffb3ae5f8355231</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::ADVANCE &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closePath</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a7c23693917e2cb75976e6ea6c947d85f</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CLOSE_PATH &gt; const &amp;)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>availableChunks</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a6ad0bdf651d13b244b6ed8ca57218144</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::AVAILABLE_CHUNKS &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>createFile</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>ad501362ff4599acc66d2a3358b5a9149</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_FILE &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>createPath</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a99ebc0452e248b2059995f5b78a67a87</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_PATH &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>createDataset</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a71531a8a7d4efeb210a4c58e0fd1ea2e</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_DATASET &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>extendDataset</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>ac67863e045adde85a9b5cf743e97c3c4</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::EXTEND_DATASET &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>openFile</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>aa34e3808ec0cd6c5a3f44eceacbde751</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_FILE &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>openPath</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>af1b85b4bf85435804def41a2b335c952</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_PATH &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>openDataset</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a884b0da0f517cbfcd36e359a6fdbbff8</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_DATASET &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deleteFile</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>acede3c709083bee5b89e19ee883e843f</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_FILE &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deletePath</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>af006b4c69e15e42b4cccdce9be407d92</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_PATH &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deleteDataset</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a05d1487961ae77a8fd17d4fed5b69649</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_DATASET &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deleteAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>acd6c3134388a0f69713ab44ae6219f3e</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_ATT &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeDataset</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a106b267c721a108ac37acec529da6ec3</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::WRITE_DATASET &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getBufferView</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a3f11e01e5a2f92c5c533ba0b03072df6</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::GET_BUFFER_VIEW &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>writeAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>ac895fcbc53b2aea756559f7143e42b9b</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::WRITE_ATT &gt; const &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readDataset</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a16ffcaed2481904cec1b870916696c47</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::READ_DATASET &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a97199cf24a6c858495efe510f0385d8e</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::READ_ATT &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>listPaths</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>ab4ac6771e110b8606cdcf20ce11a7373</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_PATHS &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>listDatasets</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>aeb665b347a03054539e4a4cc8777a24a</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_DATASETS &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>listAttributes</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a4ebaa1891bf8502801ca9ec7cbb7b427</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_ATTS &gt; &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregister</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl.html</anchorfile>
      <anchor>a6386eacea9fd6ce783c518aacaa8c59c</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DEREGISTER &gt; const &amp;param)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::AbstractIOHandlerImplCommon</name>
    <filename>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</filename>
    <templarg></templarg>
    <base>openPMD::AbstractIOHandlerImpl</base>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>fullPath</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>a4b5ead5db2c19efd75bca2aa807df271</anchor>
      <arglist>(InvalidatableFile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InvalidatableFile</type>
      <name>refreshFileFromParent</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>a554e2de38efafe287bec5f6a0eb45378</anchor>
      <arglist>(Writable *writable, bool preferParentFile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::shared_ptr&lt; FilePositionType &gt;</type>
      <name>setAndGetFilePosition</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>ad1cfcf10db0d34f295c77cb291d0f77a</anchor>
      <arglist>(Writable *writable, bool write=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; FilePositionType &gt;</type>
      <name>setAndGetFilePosition</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>a6d097344ec9d33fb077fd1f90a8bc866</anchor>
      <arglist>(Writable *writable, std::string extend)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::string</type>
      <name>filePositionToString</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>aae3cf3301045d7d2ecbc998c0e60b282</anchor>
      <arglist>(std::shared_ptr&lt; FilePositionType &gt;)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::shared_ptr&lt; FilePositionType &gt;</type>
      <name>extendFilePosition</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>a2dbec39a75992e43a8a3e8a9603fcdd6</anchor>
      <arglist>(std::shared_ptr&lt; FilePositionType &gt; const &amp;, std::string)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; Writable *, InvalidatableFile &gt;</type>
      <name>m_files</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>a434abf5fdca3fd4921a53e42b24b5fb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AbstractIOHandlerImplCommon&lt; ADIOS2FilePosition &gt;</name>
    <filename>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</filename>
    <base>openPMD::AbstractIOHandlerImpl</base>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>fullPath</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>a4b5ead5db2c19efd75bca2aa807df271</anchor>
      <arglist>(InvalidatableFile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InvalidatableFile</type>
      <name>refreshFileFromParent</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>a554e2de38efafe287bec5f6a0eb45378</anchor>
      <arglist>(Writable *writable, bool preferParentFile)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::shared_ptr&lt; ADIOS2FilePosition &gt;</type>
      <name>setAndGetFilePosition</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>ad1cfcf10db0d34f295c77cb291d0f77a</anchor>
      <arglist>(Writable *writable, bool write=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual std::shared_ptr&lt; ADIOS2FilePosition &gt;</type>
      <name>setAndGetFilePosition</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>a6d097344ec9d33fb077fd1f90a8bc866</anchor>
      <arglist>(Writable *writable, std::string extend)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::string</type>
      <name>filePositionToString</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>aae3cf3301045d7d2ecbc998c0e60b282</anchor>
      <arglist>(std::shared_ptr&lt; ADIOS2FilePosition &gt;)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::shared_ptr&lt; ADIOS2FilePosition &gt;</type>
      <name>extendFilePosition</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>a2dbec39a75992e43a8a3e8a9603fcdd6</anchor>
      <arglist>(std::shared_ptr&lt; ADIOS2FilePosition &gt; const &amp;, std::string)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; Writable *, InvalidatableFile &gt;</type>
      <name>m_files</name>
      <anchorfile>classopen_p_m_d_1_1_abstract_i_o_handler_impl_common.html</anchorfile>
      <anchor>a434abf5fdca3fd4921a53e42b24b5fb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::AbstractParameter</name>
    <filename>structopen_p_m_d_1_1_abstract_parameter.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::detail::ADIOS2File</name>
    <filename>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</filename>
    <class kind="struct">openPMD::detail::ADIOS2File::ADIOS2FlushParams</class>
    <member kind="enumeration">
      <type></type>
      <name>StreamStatus</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>aebbf3865a1d53a03d7fd4520f0894129</anchor>
      <arglist></arglist>
      <enumvalue file="classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html" anchor="aebbf3865a1d53a03d7fd4520f0894129a5b82cd5c6d19174a7b19e9314d3aceb5">DuringStep</enumvalue>
      <enumvalue file="classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html" anchor="aebbf3865a1d53a03d7fd4520f0894129aa3fcb88e67f19824f41fb1b1a4f83e5f">OutsideOfStep</enumvalue>
      <enumvalue file="classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html" anchor="aebbf3865a1d53a03d7fd4520f0894129a5616ff1b9807b592e023344047b76af4">StreamOver</enumvalue>
      <enumvalue file="classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html" anchor="aebbf3865a1d53a03d7fd4520f0894129a4a49f805face47eae2bbcc5ce90f32e6">ReadWithoutStream</enumvalue>
      <enumvalue file="classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html" anchor="aebbf3865a1d53a03d7fd4520f0894129aef203c53904d46dbafaa94497dd5a0e2">Undecided</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>a1227e15ba2f8de4459c6414609627770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_impl</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>a94191ffbca452bf00a8527ae1631683b</anchor>
      <arglist>(ADIOS2FlushParams flushParams, std::function&lt; void(ADIOS2File &amp;, adios2::Engine &amp;)&gt; const &amp;performPutGets, bool writeLatePuts, bool flushUnconditionally)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush_impl</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>a09a251ba7c5f4e9e14c08ebf36dd06f0</anchor>
      <arglist>(ADIOS2FlushParams, bool writeLatePuts=false)</arglist>
    </member>
    <member kind="function">
      <type>AdvanceStatus</type>
      <name>advance</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>a055e73c49251506b2d176edad8a37e44</anchor>
      <arglist>(AdvanceMode mode)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_file</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>a9605eb03ade64f1cbe151cc4b86f7ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_IOName</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>a5df58253d1cb0d1158c51cb7eb806a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::unique_ptr&lt; BufferedAction &gt; &gt;</type>
      <name>m_buffer</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>a1b4c5d02daee04034a6b111861aa5d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; BufferedUniquePtrPut &gt;</type>
      <name>m_uniquePtrPuts</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>a4b10962e6b740628dcfb14494be0bb70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::unique_ptr&lt; BufferedAction &gt; &gt;</type>
      <name>m_alreadyEnqueued</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>a3d4fad594da23dc9ded5feaf00906e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; unsigned, std::unique_ptr&lt; I_UpdateSpan &gt; &gt;</type>
      <name>m_updateSpans</name>
      <anchorfile>classopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file.html</anchorfile>
      <anchor>a177d8308ef9670a8702e51543d3eea98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::ADIOS2FilePosition</name>
    <filename>structopen_p_m_d_1_1_a_d_i_o_s2_file_position.html</filename>
    <base>openPMD::AbstractFilePosition</base>
    <member kind="variable">
      <type>std::string</type>
      <name>location</name>
      <anchorfile>structopen_p_m_d_1_1_a_d_i_o_s2_file_position.html</anchorfile>
      <anchor>a7c3dfe82ee37ad6f03f2d7a546d6a0ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::ADIOS2File::ADIOS2FlushParams</name>
    <filename>structopen_p_m_d_1_1detail_1_1_a_d_i_o_s2_file_1_1_a_d_i_o_s2_flush_params.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::ADIOS2IOHandler</name>
    <filename>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler.html</filename>
    <base>openPMD::AbstractIOHandler</base>
    <member kind="function">
      <type>std::string</type>
      <name>backendName</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler.html</anchorfile>
      <anchor>a7d7f9e467bd66c7788ddc83b81029795</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>flush</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler.html</anchorfile>
      <anchor>a2c686a515944d157ec291e2eb4d5288e</anchor>
      <arglist>(internal::ParsedFlushParams &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::ADIOS2IOHandlerImpl</name>
    <filename>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</filename>
    <base>AbstractIOHandlerImplCommon&lt; ADIOS2FilePosition &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>createFile</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a1f3fd8b7b796d6ea1ca2462c2e65c4ed</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_FILE &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkFile</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a8cb0cf0235379611412a9c67ee117f48</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CHECK_FILE &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPath</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>ab2e7cf9c8b196319c0ad241fb9bb1443</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_PATH &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createDataset</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a8c59cb4ef67078c3af649174b4eb06e8</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_DATASET &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendDataset</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a62b98b178b7a9db52016ddc2f3b8384b</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::EXTEND_DATASET &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openFile</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a0de3fcced8c81dd4d81b50a365846087</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_FILE &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeFile</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a72b6709316ed0afaac9924957bfca1ff</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CLOSE_FILE &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openPath</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>ad83f8d53a26a8397427d73da74b3c358</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_PATH &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closePath</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a2e277bf81293d34a13acc041123e513f</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CLOSE_PATH &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openDataset</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a40d52825c7f66b32ad6c94af7319e283</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_DATASET &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteFile</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a352a47d11c3629ff292d167565e2cdad</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_FILE &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deletePath</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a218e5ac09acf1ab9101706f96a3a1e65</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_PATH &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteDataset</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a2b0edbccee34eb13703561e836e78986</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_DATASET &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>aed34a694d238bad94abd827d748653c3</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_ATT &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeDataset</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>aa385c227f6e79b657428afd9a18bfdea</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::WRITE_DATASET &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a1c4109f4aac68f7a99d66db21db087fa</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::WRITE_ATT &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDataset</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a05a8cdae8d6ae1f3da6b8302b62fbaf7</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::READ_DATASET &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBufferView</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>ab70e611824433ef62d3f44afbc65b93e</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::GET_BUFFER_VIEW &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>acff6a005c1710d9447559baaef7b4a10</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::READ_ATT &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listPaths</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>aa56ffa6c11835c2b18cd5c23b7032799</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_PATHS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listDatasets</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a2d316b87e95c4d7df31f2282f46f163d</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_DATASETS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listAttributes</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a36e8dcd57bc265f0599b53ce65376cbb</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_ATTS &gt; &amp;parameters) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a31e115b8785f906215ba10d0d1b5b656</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::ADVANCE &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>availableChunks</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a652d9edc275d3c6e729477693db9fc7c</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::AVAILABLE_CHUNKS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregister</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>adc6414074e57c7c53ce378194b31dec1</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DEREGISTER &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>adios2::Mode</type>
      <name>adios2AccessMode</name>
      <anchorfile>classopen_p_m_d_1_1_a_d_i_o_s2_i_o_handler_impl.html</anchorfile>
      <anchor>a7e464f31df06979555535c4638e88a36</anchor>
      <arglist>(std::string const &amp;fullPath)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::append_to_variant</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1append__to__variant.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::append_to_variant&lt; first_type, std::variant&lt; other_types... &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1append__to__variant_3_01first__type_00_01std_1_1variae25766e8d7b09269965eb1567322252b.html</filename>
    <templarg></templarg>
    <templarg>other_types</templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::as_shared_pointer</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1as__shared__pointer.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::Attributable</name>
    <filename>classopen_p_m_d_1_1_attributable.html</filename>
    <class kind="struct">openPMD::Attributable::MyPath</class>
    <class kind="struct">openPMD::Attributable::NoInit</class>
    <member kind="enumeration">
      <type></type>
      <name>ReadMode</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a2739fbc7923fc5af7d5db3dfb4e79f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IgnoreExisting</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a2739fbc7923fc5af7d5db3dfb4e79f9ba8f4103cf151644594a525681d5efcbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OverrideExisting</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a2739fbc7923fc5af7d5db3dfb4e79f9bafe654309173aed8a657f0fca123a8a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullyReread</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a2739fbc7923fc5af7d5db3dfb4e79f9ba410fb45df0909be31ae06d73617f538b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IgnoreExisting</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a2739fbc7923fc5af7d5db3dfb4e79f9ba8f4103cf151644594a525681d5efcbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OverrideExisting</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a2739fbc7923fc5af7d5db3dfb4e79f9bafe654309173aed8a657f0fca123a8a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullyReread</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a2739fbc7923fc5af7d5db3dfb4e79f9ba410fb45df0909be31ae06d73617f538b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Attribute</type>
      <name>getAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a3c5baf4a1a9102c331e42340f52aa330</anchor>
      <arglist>(std::string const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>aa6e7a3bd9539bef685b7eb3b554fcc41</anchor>
      <arglist>(std::string const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>attributes</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a383542cbec8377724818c6205c99a497</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numAttributes</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a7b840a8b766e1babc2c73d6f964a7df5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a11296fc59147cb17016bddf8fb80c813</anchor>
      <arglist>(std::string const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>comment</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>ab029c2437ab6f4738f30abc904be22b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Attributable &amp;</type>
      <name>setComment</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>aac0a5610fa3879e26d56c8f38123e3f8</anchor>
      <arglist>(std::string const &amp;comment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seriesFlush</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a54413be374377304485c3aa60d6a60bc</anchor>
      <arglist>(std::string backendConfig=&quot;{}&quot;)</arglist>
    </member>
    <member kind="function">
      <type>MyPath</type>
      <name>myPath</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a216df928ff30f6234139ba5029a4212c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>readFloatingpoint</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a62a232c7b9390bfbc436e7bfccfe51e8</anchor>
      <arglist>(std::string const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>readVectorFloatingpoint</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a04813cea8abe1329e3c88ec19e1c6220</anchor>
      <arglist>(std::string const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirtyRecursive</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>a566dbaca726633d3b7092d592549cbd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>aa865143908e1ce456e2c03011bd4eb78</anchor>
      <arglist>(std::string const &amp;key, T value)</arglist>
    </member>
    <member kind="function">
      <type>Iteration const  &amp;</type>
      <name>containingIteration</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>ae64228b4fb62e76d652711ee0f676dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>aa865143908e1ce456e2c03011bd4eb78</anchor>
      <arglist>(std::string const &amp;key, T value)</arglist>
    </member>
    <member kind="function">
      <type>Iteration const  &amp;</type>
      <name>containingIteration</name>
      <anchorfile>classopen_p_m_d_1_1_attributable.html</anchorfile>
      <anchor>ae64228b4fb62e76d652711ee0f676dec</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::internal::AttributableData</name>
    <filename>classopen_p_m_d_1_1internal_1_1_attributable_data.html</filename>
    <member kind="variable">
      <type>Writable</type>
      <name>m_writable</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_attributable_data.html</anchorfile>
      <anchor>a28cdf8e99c75fb72beaa36b3fe457960</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::Attribute</name>
    <filename>classopen_p_m_d_1_1_attribute.html</filename>
    <base>Variant&lt; Datatype, attribute_types &gt;</base>
    <member kind="function">
      <type>U</type>
      <name>get</name>
      <anchorfile>classopen_p_m_d_1_1_attribute.html</anchorfile>
      <anchor>a9a73ac10fe6cd9c30639e1480ef5b66c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; U &gt;</type>
      <name>getOptional</name>
      <anchorfile>classopen_p_m_d_1_1_attribute.html</anchorfile>
      <anchor>aad4cf57ba9c78582a82ee30b4b679d5b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::AttributeInfo</name>
    <filename>structopen_p_m_d_1_1detail_1_1_attribute_info.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::AttributeReader</name>
    <filename>structopen_p_m_d_1_1detail_1_1_attribute_reader.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::AttributeTypes</name>
    <filename>structopen_p_m_d_1_1detail_1_1_attribute_types.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>attributeUnchanged</name>
      <anchorfile>structopen_p_m_d_1_1detail_1_1_attribute_types.html</anchorfile>
      <anchor>a09e24fdf795501f811183b3dd92739d8</anchor>
      <arglist>(adios2::IO &amp;IO, std::string name, T val)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::AttributeTypes&lt; bool &gt;</name>
    <filename>structopen_p_m_d_1_1detail_1_1_attribute_types_3_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::AttributeTypes&lt; std::array&lt; T, n &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1detail_1_1_attribute_types_3_01std_1_1array_3_01_t_00_01n_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::AttributeTypes&lt; std::complex&lt; long double &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1detail_1_1_attribute_types_3_01std_1_1complex_3_01long_01double_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::AttributeTypes&lt; std::vector&lt; std::complex&lt; long double &gt; &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1detail_1_1_attribute_types_3_01std_1_1vector_3_01std_1_1complex_3_01long_01double_01_4_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::AttributeTypes&lt; std::vector&lt; std::string &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1detail_1_1_attribute_types_3_01std_1_1vector_3_01std_1_1string_01_4_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::AttributeTypes&lt; std::vector&lt; T &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1detail_1_1_attribute_types_3_01std_1_1vector_3_01_t_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::AttributeWriter</name>
    <filename>structopen_p_m_d_1_1detail_1_1_attribute_writer.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::error::BackendConfigSchema</name>
    <filename>classopen_p_m_d_1_1error_1_1_backend_config_schema.html</filename>
    <base>openPMD::Error</base>
  </compound>
  <compound kind="class">
    <name>openPMD::BaseRecord</name>
    <filename>classopen_p_m_d_1_1_base_record.html</filename>
    <templarg></templarg>
    <base>Container&lt; T_elem &gt;</base>
    <member kind="function">
      <type>std::array&lt; double, 7 &gt;</type>
      <name>unitDimension</name>
      <anchorfile>classopen_p_m_d_1_1_base_record.html</anchorfile>
      <anchor>adcd24ca5844d3c22f8b4b16f08cdaf77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scalar</name>
      <anchorfile>classopen_p_m_d_1_1_base_record.html</anchorfile>
      <anchor>a226f2e1676e985f6ce5402cc16b0ecc6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseRecord&lt; MeshRecordComponent &gt;</name>
    <filename>classopen_p_m_d_1_1_base_record.html</filename>
    <base>openPMD::Container</base>
    <base>openPMD::MeshRecordComponent</base>
    <member kind="function">
      <type>std::array&lt; double, 7 &gt;</type>
      <name>unitDimension</name>
      <anchorfile>classopen_p_m_d_1_1_base_record.html</anchorfile>
      <anchor>adcd24ca5844d3c22f8b4b16f08cdaf77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scalar</name>
      <anchorfile>classopen_p_m_d_1_1_base_record.html</anchorfile>
      <anchor>a226f2e1676e985f6ce5402cc16b0ecc6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseRecord&lt; PatchRecordComponent &gt;</name>
    <filename>classopen_p_m_d_1_1_base_record.html</filename>
    <base>openPMD::Container</base>
    <base>openPMD::PatchRecordComponent</base>
    <member kind="function">
      <type>std::array&lt; double, 7 &gt;</type>
      <name>unitDimension</name>
      <anchorfile>classopen_p_m_d_1_1_base_record.html</anchorfile>
      <anchor>adcd24ca5844d3c22f8b4b16f08cdaf77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scalar</name>
      <anchorfile>classopen_p_m_d_1_1_base_record.html</anchorfile>
      <anchor>a226f2e1676e985f6ce5402cc16b0ecc6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseRecord&lt; RecordComponent &gt;</name>
    <filename>classopen_p_m_d_1_1_base_record.html</filename>
    <base>openPMD::Container</base>
    <base>openPMD::RecordComponent</base>
    <member kind="function">
      <type>std::array&lt; double, 7 &gt;</type>
      <name>unitDimension</name>
      <anchorfile>classopen_p_m_d_1_1_base_record.html</anchorfile>
      <anchor>adcd24ca5844d3c22f8b4b16f08cdaf77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>scalar</name>
      <anchorfile>classopen_p_m_d_1_1_base_record.html</anchorfile>
      <anchor>a226f2e1676e985f6ce5402cc16b0ecc6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::BaseRecordComponent</name>
    <filename>classopen_p_m_d_1_1_base_record_component.html</filename>
    <base virtualness="virtual">openPMD::Attributable</base>
    <member kind="function">
      <type>bool</type>
      <name>constant</name>
      <anchorfile>classopen_p_m_d_1_1_base_record_component.html</anchorfile>
      <anchor>a1ef8dba3682663ff1535932bdccd0e8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ChunkTable</type>
      <name>availableChunks</name>
      <anchorfile>classopen_p_m_d_1_1_base_record_component.html</anchorfile>
      <anchor>a5253b84070b41889aef7df04afeb28b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::internal::BaseRecordComponentData</name>
    <filename>classopen_p_m_d_1_1internal_1_1_base_record_component_data.html</filename>
    <base virtualness="virtual">openPMD::internal::AttributableData</base>
    <member kind="variable">
      <type>std::optional&lt; Dataset &gt;</type>
      <name>m_dataset</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_base_record_component_data.html</anchorfile>
      <anchor>a07fe4b90f94fdd928f1432094560c21b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isConstant</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_base_record_component_data.html</anchorfile>
      <anchor>a918e9ecd51592422b025d1016fe63a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_datasetDefined</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_base_record_component_data.html</anchorfile>
      <anchor>a1d392473f3b06d3f1ebf85197380d582</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::internal::BaseRecordData</name>
    <filename>classopen_p_m_d_1_1internal_1_1_base_record_data.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ContainerData&lt; T_elem &gt;</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::BasicDatatype</name>
    <filename>structopen_p_m_d_1_1detail_1_1_basic_datatype.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>openPMD::BlockSlicer</name>
    <filename>classopen_p_m_d_1_1_block_slicer.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::pair&lt; Offset, Extent &gt;</type>
      <name>sliceBlock</name>
      <anchorfile>classopen_p_m_d_1_1_block_slicer.html</anchorfile>
      <anchor>af39ac8460fb933be81aa90f792b0299a</anchor>
      <arglist>(Extent &amp;totalExtent, int size, int rank)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BlockSlicer</name>
      <anchorfile>classopen_p_m_d_1_1_block_slicer.html</anchorfile>
      <anchor>ac1374020f43d5265a1b56d4c000bdea1</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::bottom</name>
    <filename>structopen_p_m_d_1_1detail_1_1bottom.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::BufferedAction</name>
    <filename>structopen_p_m_d_1_1detail_1_1_buffered_action.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::BufferedGet</name>
    <filename>structopen_p_m_d_1_1detail_1_1_buffered_get.html</filename>
    <base>openPMD::detail::BufferedAction</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::BufferedPut</name>
    <filename>structopen_p_m_d_1_1detail_1_1_buffered_put.html</filename>
    <base>openPMD::detail::BufferedAction</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::BufferedUniquePtrPut</name>
    <filename>structopen_p_m_d_1_1detail_1_1_buffered_unique_ptr_put.html</filename>
  </compound>
  <compound kind="struct">
    <name>detail::char_to_explicit_char</name>
    <filename>structdetail_1_1char__to__explicit__char.html</filename>
    <templarg>is_signed</templarg>
  </compound>
  <compound kind="struct">
    <name>detail::char_to_explicit_char&lt; false &gt;</name>
    <filename>structdetail_1_1char__to__explicit__char_3_01false_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>detail::char_to_explicit_char&lt; true &gt;</name>
    <filename>structdetail_1_1char__to__explicit__char_3_01true_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>openpmd_api::pipe::__main__::Chunk</name>
    <filename>classopenpmd__api_1_1pipe_1_1____main_____1_1_chunk.html</filename>
    <member kind="function">
      <type>def</type>
      <name>slice1D</name>
      <anchorfile>classopenpmd__api_1_1pipe_1_1____main_____1_1_chunk.html</anchorfile>
      <anchor>a2c8a8988d4871d3fafbf45bfcd317134</anchor>
      <arglist>(self, mpi_rank, mpi_size, dimension=None)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::ChunkInfo</name>
    <filename>structopen_p_m_d_1_1_chunk_info.html</filename>
    <member kind="variable">
      <type>Offset</type>
      <name>offset</name>
      <anchorfile>structopen_p_m_d_1_1_chunk_info.html</anchorfile>
      <anchor>a3d93015c2910caf58b93512ff905e12a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Extent</type>
      <name>extent</name>
      <anchorfile>structopen_p_m_d_1_1_chunk_info.html</anchorfile>
      <anchor>a333f38ff24eab4f8bb8f89dd5c52af9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::Container</name>
    <filename>classopen_p_m_d_1_1_container.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">openPMD::Attributable</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a3421bc06d8afb8182ee4d51eb2e8d803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a23b3bf3bbe7796807a728bf7517fa66f</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>af8807bcf1fc7e88e238907ed1a658602</anchor>
      <arglist>(key_type &amp;&amp;key)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a5cd4fdcf28a83f768d3b2d31fd23c264</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a6312423c16c220697cf37c57ea414701</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a4926d5a489914d8ed2ad7a543677a1cf</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a67479b7fe06c10ea3a65d9b00a4faab6</anchor>
      <arglist>(iterator res)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>emplace</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a72d63a55e8629b97cc4b83911159d3cb</anchor>
      <arglist>(Args &amp;&amp;...args) -&gt; decltype(InternalContainer().emplace(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; Iteration, Iteration::IterationIndex_t &gt;</name>
    <filename>classopen_p_m_d_1_1_container.html</filename>
    <base virtualness="virtual">openPMD::Attributable</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a3421bc06d8afb8182ee4d51eb2e8d803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a23b3bf3bbe7796807a728bf7517fa66f</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>af8807bcf1fc7e88e238907ed1a658602</anchor>
      <arglist>(key_type &amp;&amp;key)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a5cd4fdcf28a83f768d3b2d31fd23c264</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a6312423c16c220697cf37c57ea414701</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a4926d5a489914d8ed2ad7a543677a1cf</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a67479b7fe06c10ea3a65d9b00a4faab6</anchor>
      <arglist>(iterator res)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>emplace</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a72d63a55e8629b97cc4b83911159d3cb</anchor>
      <arglist>(Args &amp;&amp;...args) -&gt; decltype(InternalContainer().emplace(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; Iteration, IterationIndex_t &gt;</name>
    <filename>classopen_p_m_d_1_1_container.html</filename>
    <base virtualness="virtual">openPMD::Attributable</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a3421bc06d8afb8182ee4d51eb2e8d803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a23b3bf3bbe7796807a728bf7517fa66f</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>af8807bcf1fc7e88e238907ed1a658602</anchor>
      <arglist>(key_type &amp;&amp;key)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a5cd4fdcf28a83f768d3b2d31fd23c264</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a6312423c16c220697cf37c57ea414701</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a4926d5a489914d8ed2ad7a543677a1cf</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a67479b7fe06c10ea3a65d9b00a4faab6</anchor>
      <arglist>(iterator res)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>emplace</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a72d63a55e8629b97cc4b83911159d3cb</anchor>
      <arglist>(Args &amp;&amp;...args) -&gt; decltype(InternalContainer().emplace(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; openPMD::Mesh &gt;</name>
    <filename>classopen_p_m_d_1_1_container.html</filename>
    <base virtualness="virtual">openPMD::Attributable</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a3421bc06d8afb8182ee4d51eb2e8d803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a23b3bf3bbe7796807a728bf7517fa66f</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>af8807bcf1fc7e88e238907ed1a658602</anchor>
      <arglist>(key_type &amp;&amp;key)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a5cd4fdcf28a83f768d3b2d31fd23c264</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a6312423c16c220697cf37c57ea414701</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a4926d5a489914d8ed2ad7a543677a1cf</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a67479b7fe06c10ea3a65d9b00a4faab6</anchor>
      <arglist>(iterator res)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>emplace</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a72d63a55e8629b97cc4b83911159d3cb</anchor>
      <arglist>(Args &amp;&amp;...args) -&gt; decltype(InternalContainer().emplace(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; openPMD::ParticleSpecies &gt;</name>
    <filename>classopen_p_m_d_1_1_container.html</filename>
    <base virtualness="virtual">openPMD::Attributable</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a3421bc06d8afb8182ee4d51eb2e8d803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a23b3bf3bbe7796807a728bf7517fa66f</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>af8807bcf1fc7e88e238907ed1a658602</anchor>
      <arglist>(key_type &amp;&amp;key)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a5cd4fdcf28a83f768d3b2d31fd23c264</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a6312423c16c220697cf37c57ea414701</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a4926d5a489914d8ed2ad7a543677a1cf</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a67479b7fe06c10ea3a65d9b00a4faab6</anchor>
      <arglist>(iterator res)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>emplace</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a72d63a55e8629b97cc4b83911159d3cb</anchor>
      <arglist>(Args &amp;&amp;...args) -&gt; decltype(InternalContainer().emplace(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; PatchRecord &gt;</name>
    <filename>classopen_p_m_d_1_1_container.html</filename>
    <base virtualness="virtual">openPMD::Attributable</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a3421bc06d8afb8182ee4d51eb2e8d803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a23b3bf3bbe7796807a728bf7517fa66f</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>af8807bcf1fc7e88e238907ed1a658602</anchor>
      <arglist>(key_type &amp;&amp;key)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a5cd4fdcf28a83f768d3b2d31fd23c264</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a6312423c16c220697cf37c57ea414701</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a4926d5a489914d8ed2ad7a543677a1cf</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a67479b7fe06c10ea3a65d9b00a4faab6</anchor>
      <arglist>(iterator res)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>emplace</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a72d63a55e8629b97cc4b83911159d3cb</anchor>
      <arglist>(Args &amp;&amp;...args) -&gt; decltype(InternalContainer().emplace(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; Record &gt;</name>
    <filename>classopen_p_m_d_1_1_container.html</filename>
    <base virtualness="virtual">openPMD::Attributable</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a3421bc06d8afb8182ee4d51eb2e8d803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a23b3bf3bbe7796807a728bf7517fa66f</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>af8807bcf1fc7e88e238907ed1a658602</anchor>
      <arglist>(key_type &amp;&amp;key)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a5cd4fdcf28a83f768d3b2d31fd23c264</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a6312423c16c220697cf37c57ea414701</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a4926d5a489914d8ed2ad7a543677a1cf</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a67479b7fe06c10ea3a65d9b00a4faab6</anchor>
      <arglist>(iterator res)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>emplace</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a72d63a55e8629b97cc4b83911159d3cb</anchor>
      <arglist>(Args &amp;&amp;...args) -&gt; decltype(InternalContainer().emplace(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Container&lt; T_elem &gt;</name>
    <filename>classopen_p_m_d_1_1_container.html</filename>
    <base virtualness="virtual">openPMD::Attributable</base>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a3421bc06d8afb8182ee4d51eb2e8d803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a23b3bf3bbe7796807a728bf7517fa66f</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>mapped_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>af8807bcf1fc7e88e238907ed1a658602</anchor>
      <arglist>(key_type &amp;&amp;key)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a5cd4fdcf28a83f768d3b2d31fd23c264</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a6312423c16c220697cf37c57ea414701</anchor>
      <arglist>(key_type const &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a4926d5a489914d8ed2ad7a543677a1cf</anchor>
      <arglist>(key_type const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a67479b7fe06c10ea3a65d9b00a4faab6</anchor>
      <arglist>(iterator res)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>emplace</name>
      <anchorfile>classopen_p_m_d_1_1_container.html</anchorfile>
      <anchor>a72d63a55e8629b97cc4b83911159d3cb</anchor>
      <arglist>(Args &amp;&amp;...args) -&gt; decltype(InternalContainer().emplace(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::internal::ContainerData</name>
    <filename>classopen_p_m_d_1_1internal_1_1_container_data.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base virtualness="virtual">openPMD::internal::AttributableData</base>
    <member kind="variable">
      <type>InternalContainer</type>
      <name>m_container</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_container_data.html</anchorfile>
      <anchor>a564c61cbe92095328d2ae22ebd85a345</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ContainerData&lt; T_elem &gt;</name>
    <filename>classopen_p_m_d_1_1internal_1_1_container_data.html</filename>
    <base virtualness="virtual">openPMD::internal::AttributableData</base>
    <member kind="variable">
      <type>InternalContainer</type>
      <name>m_container</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_container_data.html</anchorfile>
      <anchor>a564c61cbe92095328d2ae22ebd85a345</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::auxiliary::CustomDelete</name>
    <filename>classopen_p_m_d_1_1auxiliary_1_1_custom_delete.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>openpmd_api::DaskArray::DaskRecordComponent</name>
    <filename>classopenpmd__api_1_1_dask_array_1_1_dask_record_component.html</filename>
    <member kind="function">
      <type>def</type>
      <name>__getitem__</name>
      <anchorfile>classopenpmd__api_1_1_dask_array_1_1_dask_record_component.html</anchorfile>
      <anchor>adf101f12c04a8fbf80d4c281a3593002</anchor>
      <arglist>(self, slices)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::Dataset</name>
    <filename>classopen_p_m_d_1_1_dataset.html</filename>
    <member kind="function">
      <type></type>
      <name>Dataset</name>
      <anchorfile>classopen_p_m_d_1_1_dataset.html</anchorfile>
      <anchor>afc65831a1599c23d3fb6a6e1a72ae03e</anchor>
      <arglist>(Extent)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>options</name>
      <anchorfile>classopen_p_m_d_1_1_dataset.html</anchorfile>
      <anchor>adc7009864784dad073844f79b1e53067</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::DatasetExtender</name>
    <filename>structopen_p_m_d_1_1detail_1_1_dataset_extender.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::DatasetFiller</name>
    <filename>classopen_p_m_d_1_1_dataset_filler.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DatasetFiller</name>
      <anchorfile>classopen_p_m_d_1_1_dataset_filler.html</anchorfile>
      <anchor>a78bdc95beae24edfbaf2c253e939c0c6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; T &gt;</type>
      <name>produceData</name>
      <anchorfile>classopen_p_m_d_1_1_dataset_filler.html</anchorfile>
      <anchor>a38695f51516c53705ea0c2893b2ec967</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setNumberOfItems</name>
      <anchorfile>classopen_p_m_d_1_1_dataset_filler.html</anchorfile>
      <anchor>ad3a4a8a46afa064e863499a51d718b13</anchor>
      <arglist>(Extent::value_type numberOfItems)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DatasetFiller&lt; typename Distr::result_type &gt;</name>
    <filename>classopen_p_m_d_1_1_dataset_filler.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DatasetFiller</name>
      <anchorfile>classopen_p_m_d_1_1_dataset_filler.html</anchorfile>
      <anchor>a78bdc95beae24edfbaf2c253e939c0c6</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; typename Distr::result_type &gt;</type>
      <name>produceData</name>
      <anchorfile>classopen_p_m_d_1_1_dataset_filler.html</anchorfile>
      <anchor>a38695f51516c53705ea0c2893b2ec967</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setNumberOfItems</name>
      <anchorfile>classopen_p_m_d_1_1_dataset_filler.html</anchorfile>
      <anchor>ad3a4a8a46afa064e863499a51d718b13</anchor>
      <arglist>(Extent::value_type numberOfItems)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::DatasetHelper</name>
    <filename>structopen_p_m_d_1_1detail_1_1_dataset_helper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::DatasetOpener</name>
    <filename>structopen_p_m_d_1_1detail_1_1_dataset_opener.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::DatasetReader</name>
    <filename>structopen_p_m_d_1_1detail_1_1_dataset_reader.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::DatasetTypes</name>
    <filename>structopen_p_m_d_1_1detail_1_1_dataset_types.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::decay_equiv</name>
    <filename>structopen_p_m_d_1_1decay__equiv.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::DefaultValue</name>
    <filename>structopen_p_m_d_1_1detail_1_1_default_value.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>openpmd_api::pipe::__main__::deferred_load</name>
    <filename>classopenpmd__api_1_1pipe_1_1____main_____1_1deferred__load.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::internal::DeferredParseAccess</name>
    <filename>structopen_p_m_d_1_1internal_1_1_deferred_parse_access.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>path</name>
      <anchorfile>structopen_p_m_d_1_1internal_1_1_deferred_parse_access.html</anchorfile>
      <anchor>a976584714ea7b567fb56ab77499fbca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint64_t</type>
      <name>iteration</name>
      <anchorfile>structopen_p_m_d_1_1internal_1_1_deferred_parse_access.html</anchorfile>
      <anchor>a8f5ddc3821d6a12e4d7731083f3e7348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>fileBased</name>
      <anchorfile>structopen_p_m_d_1_1internal_1_1_deferred_parse_access.html</anchorfile>
      <anchor>abe6265ab7e55eba5df904c9518676656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>filename</name>
      <anchorfile>structopen_p_m_d_1_1internal_1_1_deferred_parse_access.html</anchorfile>
      <anchor>a2f9bfa47c609bbc4afae7b99ed804d2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::DummyIOHandler</name>
    <filename>classopen_p_m_d_1_1_dummy_i_o_handler.html</filename>
    <base>openPMD::AbstractIOHandler</base>
    <member kind="function">
      <type>void</type>
      <name>enqueue</name>
      <anchorfile>classopen_p_m_d_1_1_dummy_i_o_handler.html</anchorfile>
      <anchor>ab7fecf49f9f7aff69c11b7ba34ab32db</anchor>
      <arglist>(IOTask const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>flush</name>
      <anchorfile>classopen_p_m_d_1_1_dummy_i_o_handler.html</anchorfile>
      <anchor>af5cf1942e3d18e880f6e9a7b42570ad6</anchor>
      <arglist>(internal::ParsedFlushParams &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>backendName</name>
      <anchorfile>classopen_p_m_d_1_1_dummy_i_o_handler.html</anchorfile>
      <anchor>a0a646801f7a39a93cae8589ed1252944</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::DynamicMemoryView</name>
    <filename>classopen_p_m_d_1_1_dynamic_memory_view.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Span&lt; T &gt;</type>
      <name>currentBuffer</name>
      <anchorfile>classopen_p_m_d_1_1_dynamic_memory_view.html</anchorfile>
      <anchor>a37c390f78e10cc7c3f1c88cc92a93c17</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::internal::EraseStaleEntries</name>
    <filename>classopen_p_m_d_1_1internal_1_1_erase_stale_entries.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>forget</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_erase_stale_entries.html</anchorfile>
      <anchor>a1b5e07cc97b3d976f0e2971a750d1efa</anchor>
      <arglist>(K &amp;&amp;k)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::Error</name>
    <filename>classopen_p_m_d_1_1_error.html</filename>
  </compound>
  <compound kind="class">
    <name>openpmd_api::pipe::__main__::FallbackMPICommunicator</name>
    <filename>classopenpmd__api_1_1pipe_1_1____main_____1_1_fallback_m_p_i_communicator.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::File</name>
    <filename>structopen_p_m_d_1_1_file.html</filename>
    <class kind="struct">openPMD::File::FileState</class>
  </compound>
  <compound kind="struct">
    <name>openPMD::File::FileState</name>
    <filename>structopen_p_m_d_1_1_file_1_1_file_state.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::InvalidatableFile::FileState</name>
    <filename>structopen_p_m_d_1_1_invalidatable_file_1_1_file_state.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::internal::FlushParams</name>
    <filename>structopen_p_m_d_1_1internal_1_1_flush_params.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::traits::GenerationPolicy</name>
    <filename>structopen_p_m_d_1_1traits_1_1_generation_policy.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::traits::GenerationPolicy&lt; ParticleSpecies &gt;</name>
    <filename>structopen_p_m_d_1_1traits_1_1_generation_policy_3_01_particle_species_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::GetH5DataType</name>
    <filename>structopen_p_m_d_1_1_get_h5_data_type.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::GetSpan</name>
    <filename>structopen_p_m_d_1_1detail_1_1_get_span.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; openPMD::File &gt;</name>
    <filename>structstd_1_1hash_3_01open_p_m_d_1_1_file_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; openPMD::InvalidatableFile &gt;</name>
    <filename>structstd_1_1hash_3_01open_p_m_d_1_1_invalidatable_file_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::HasOperators</name>
    <filename>structopen_p_m_d_1_1detail_1_1_has_operators.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::HDF5FilePosition</name>
    <filename>structopen_p_m_d_1_1_h_d_f5_file_position.html</filename>
    <base>openPMD::AbstractFilePosition</base>
  </compound>
  <compound kind="class">
    <name>openPMD::HDF5IOHandler</name>
    <filename>classopen_p_m_d_1_1_h_d_f5_i_o_handler.html</filename>
    <base>openPMD::AbstractIOHandler</base>
    <member kind="function">
      <type>std::string</type>
      <name>backendName</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler.html</anchorfile>
      <anchor>a11c766b900ea397d86cd6cabec64e33c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>flush</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler.html</anchorfile>
      <anchor>a2b17044fd00d0bf00b8935dd84a10c57</anchor>
      <arglist>(internal::ParsedFlushParams &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::HDF5IOHandlerImpl</name>
    <filename>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</filename>
    <base>openPMD::AbstractIOHandlerImpl</base>
    <member kind="function">
      <type>void</type>
      <name>createFile</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a71f2ce49e93622a6f848451d66e630a9</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_FILE &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkFile</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a8598c4c160ca9a2ffa02f6e77fff88ab</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CHECK_FILE &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPath</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>ad95f8d3416d90f560df97f44faaa756a</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_PATH &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createDataset</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a04d8af7e377f4defd01cc82ed3d08969</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_DATASET &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendDataset</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a42dc6e4ae43f294b5b0b7381faa298a2</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::EXTEND_DATASET &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>availableChunks</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a4733f9bd0c697dc58468fd91411b4742</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::AVAILABLE_CHUNKS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openFile</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a28f512224dc3f280ee4d3bb2de5488d4</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_FILE &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeFile</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a2ec4ab616fead11b551d9dca6bc72b19</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CLOSE_FILE &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openPath</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>ae4287cc3b54abfff713b5b26879a5eaf</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_PATH &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openDataset</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a981c5d47cad6c8fcb14a0b03115bc8ea</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_DATASET &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteFile</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a6e08f1ddcbf972c0088d6aae708007aa</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_FILE &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deletePath</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>acddc61d539ca475e0fcc3982b8c6cb0f</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_PATH &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteDataset</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a3221bf13c55a0c876941fdcb145dae75</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_DATASET &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a124310c079630f30aba75ed2ff0cc8a0</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_ATT &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeDataset</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>af8ce5b5c10263de383f9bebb1aff6489</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::WRITE_DATASET &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a661fcd1c728422d5ade95ba1a6a267f5</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::WRITE_ATT &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDataset</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a640c9a29c822276b6ce31a8878340a7a</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::READ_DATASET &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>ad5bcd3cb2e0cf0066ccf5e23d63c8ce8</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::READ_ATT &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listPaths</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a250bf4ebfa0eaf1240585af922b9d0a7</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_PATHS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listDatasets</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a674ab3624944b80164a7432170aa3fa1</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_DATASETS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listAttributes</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a9493f3b8c7b0ba4f4fd9f6d41c1f6752</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_ATTS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregister</name>
      <anchorfile>classopen_p_m_d_1_1_h_d_f5_i_o_handler_impl.html</anchorfile>
      <anchor>a607da625fc1c45f6c9414054396a1443</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DEREGISTER &gt; const &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::I_UpdateSpan</name>
    <filename>structopen_p_m_d_1_1detail_1_1_i___update_span.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::IndexedIteration</name>
    <filename>classopen_p_m_d_1_1_indexed_iteration.html</filename>
    <base>openPMD::Iteration</base>
  </compound>
  <compound kind="class">
    <name>openPMD::error::Internal</name>
    <filename>classopen_p_m_d_1_1error_1_1_internal.html</filename>
    <base>openPMD::Error</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::InvalidatableFile</name>
    <filename>structopen_p_m_d_1_1_invalidatable_file.html</filename>
    <class kind="struct">openPMD::InvalidatableFile::FileState</class>
  </compound>
  <compound kind="class">
    <name>openPMD::IOTask</name>
    <filename>classopen_p_m_d_1_1_i_o_task.html</filename>
    <member kind="function">
      <type></type>
      <name>IOTask</name>
      <anchorfile>classopen_p_m_d_1_1_i_o_task.html</anchorfile>
      <anchor>ac1019628dd0f261e9cc80adcf043c0a7</anchor>
      <arglist>(Writable *w, Parameter&lt; op &gt; p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsArray</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_array.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsArray&lt; std::array&lt; T, n &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_array_3_01std_1_1array_3_01_t_00_01n_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsChar</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_char.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsChar&lt; char &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_char_3_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsChar&lt; signed char &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_char_3_01signed_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsChar&lt; unsigned char &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_char_3_01unsigned_01char_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsComplex</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_complex.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsComplex&lt; std::complex&lt; T &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_complex_3_01std_1_1complex_3_01_t_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsPointer</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_pointer.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsPointer&lt; std::shared_ptr&lt; T &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_pointer_3_01std_1_1shared__ptr_3_01_t_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsPointer&lt; std::unique_ptr&lt; T, Del &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_pointer_3_01std_1_1unique__ptr_3_01_t_00_01_del_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsPointer&lt; T * &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_pointer_3_01_t_01_5_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsPointer&lt; UniquePtrWithLambda&lt; T &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_pointer_3_01_unique_ptr_with_lambda_3_01_t_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsVector</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_vector.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::IsVector&lt; std::vector&lt; T &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1_is_vector_3_01std_1_1vector_3_01_t_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>openPMD::Iteration</name>
    <filename>classopen_p_m_d_1_1_iteration.html</filename>
    <base>openPMD::Attributable</base>
    <member kind="function">
      <type>T</type>
      <name>time</name>
      <anchorfile>classopen_p_m_d_1_1_iteration.html</anchorfile>
      <anchor>a869dd2fb9a5f2fae5b4d6a29ae970ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iteration &amp;</type>
      <name>setTime</name>
      <anchorfile>classopen_p_m_d_1_1_iteration.html</anchorfile>
      <anchor>a5866fed55edcb8321ae78585a71a42f6</anchor>
      <arglist>(T newTime)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dt</name>
      <anchorfile>classopen_p_m_d_1_1_iteration.html</anchorfile>
      <anchor>ab28eae4f6b60995d7d4ca9cd629cc65b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iteration &amp;</type>
      <name>setDt</name>
      <anchorfile>classopen_p_m_d_1_1_iteration.html</anchorfile>
      <anchor>adb209236101ec02ad54e80b6075f4b52</anchor>
      <arglist>(T newDt)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>timeUnitSI</name>
      <anchorfile>classopen_p_m_d_1_1_iteration.html</anchorfile>
      <anchor>a3824d680cc684644c4d3293d799df825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iteration &amp;</type>
      <name>setTimeUnitSI</name>
      <anchorfile>classopen_p_m_d_1_1_iteration.html</anchorfile>
      <anchor>a1ae9aaa79214cc967deebbcf48d55633</anchor>
      <arglist>(double newTimeUnitSI)</arglist>
    </member>
    <member kind="function">
      <type>Iteration &amp;</type>
      <name>close</name>
      <anchorfile>classopen_p_m_d_1_1_iteration.html</anchorfile>
      <anchor>ac5b9108aa82b9469fa6987661cec1aa1</anchor>
      <arglist>(bool flush=true)</arglist>
    </member>
    <member kind="function">
      <type>Iteration &amp;</type>
      <name>open</name>
      <anchorfile>classopen_p_m_d_1_1_iteration.html</anchorfile>
      <anchor>ab5610013ff6bb6d9ae6795f33856ffc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closed</name>
      <anchorfile>classopen_p_m_d_1_1_iteration.html</anchorfile>
      <anchor>aa075bbf4d8b9b536bf1be6bc6548d582</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closedByWriter</name>
      <anchorfile>classopen_p_m_d_1_1_iteration.html</anchorfile>
      <anchor>a71501fba335ae044a3c12e202a008033</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::internal::IterationData</name>
    <filename>classopen_p_m_d_1_1internal_1_1_iteration_data.html</filename>
    <base>openPMD::internal::AttributableData</base>
    <member kind="variable">
      <type>StepStatus</type>
      <name>m_stepStatus</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_iteration_data.html</anchorfile>
      <anchor>a08e27660d2beb7751d4cced25bdf2c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; DeferredParseAccess &gt;</type>
      <name>m_deferredParseAccess</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_iteration_data.html</anchorfile>
      <anchor>ab1bc8c7a07685a570e24f32fa27315bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; std::string &gt;</type>
      <name>m_overrideFilebasedFilename</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_iteration_data.html</anchorfile>
      <anchor>ac2b99f40a78e572422b8233ae417ab22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::JSONFilePosition</name>
    <filename>structopen_p_m_d_1_1_j_s_o_n_file_position.html</filename>
    <base>openPMD::AbstractFilePosition</base>
  </compound>
  <compound kind="class">
    <name>openPMD::JSONIOHandler</name>
    <filename>classopen_p_m_d_1_1_j_s_o_n_i_o_handler.html</filename>
    <base>openPMD::AbstractIOHandler</base>
    <member kind="function">
      <type>std::string</type>
      <name>backendName</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler.html</anchorfile>
      <anchor>ade6d7a7e343f719e43e69fcd05e1f43d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>flush</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler.html</anchorfile>
      <anchor>ad6a64875480052dfa35752ffd3a8a4c2</anchor>
      <arglist>(internal::ParsedFlushParams &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::JSONIOHandlerImpl</name>
    <filename>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</filename>
    <base>openPMD::AbstractIOHandlerImpl</base>
    <member kind="function">
      <type>void</type>
      <name>createFile</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a91484c719cb4b1a43253d3c677566022</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_FILE &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkFile</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a2ab95a3311b5f4ad8e17f65372347241</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CHECK_FILE &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPath</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a07171d12df218ad79fc27b4cfc091c7f</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_PATH &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createDataset</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>ac1b32c5456db7c6b90029fd5cf186006</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CREATE_DATASET &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extendDataset</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>ace23df4888c783b6d8105126236d542e</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::EXTEND_DATASET &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>availableChunks</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a10df0cf9d242c1096e313e934437eb00</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::AVAILABLE_CHUNKS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openFile</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a50f169eeceaedc1d5a1950a7ada29a21</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_FILE &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeFile</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>ab83373e4587f846e21fe3bfa3b8ecffc</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::CLOSE_FILE &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openPath</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a2cacb15fb7ddec2b58ab95da0077340f</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_PATH &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>openDataset</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a56a0ee144ed00449f3f4c4b7b9a42259</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::OPEN_DATASET &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteFile</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a95fdc087b4af8954dfeb8af029781ad0</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_FILE &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deletePath</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a64154e8f54d2d4b11baee9f75fd9b9dd</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_PATH &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteDataset</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>ac50881472d57f29d66dae0dfff50f93b</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_DATASET &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a4322d8de9450393fec7ca9d59a18f56f</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DELETE_ATT &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeDataset</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a95210f27a51f1565674c8129b5775eab</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::WRITE_DATASET &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a656a553755af254dd85614f04d75270e</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::WRITE_ATT &gt; const &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readDataset</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a3ed35bf294f39ed1c86c152cfb5821d5</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::READ_DATASET &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readAttribute</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a7cd1099708987a9b1de0a90ccaf34d74</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::READ_ATT &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listPaths</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>aa8f8b6a5e2871d704ef36c0adc7b4289</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_PATHS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listDatasets</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>aba30aa65179a20e87e23e6785d458237</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_DATASETS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>listAttributes</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a1de6df826c79320e88e0ca9b86a218ab</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::LIST_ATTS &gt; &amp;) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregister</name>
      <anchorfile>classopen_p_m_d_1_1_j_s_o_n_i_o_handler_impl.html</anchorfile>
      <anchor>a7929cb23b02a7180a21e32e1d6a5e1b7</anchor>
      <arglist>(Writable *, Parameter&lt; Operation::DEREGISTER &gt; const &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::MakeEmpty</name>
    <filename>structopen_p_m_d_1_1detail_1_1_make_empty.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::map_variant</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1map__variant.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::map_variant&lt; F, std::variant&lt; first_type, other_types... &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1map__variant_3_01_f_00_01std_1_1variant_3_01first__ty8a03d7babd74ac32800eea511211f97d.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>other_types</templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::detail::map_variant&lt; F, std::variant&lt;&gt; &gt;</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1detail_1_1map__variant_3_01_f_00_01std_1_1variant_3_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>openPMD::benchmark::MemoryProfiler</name>
    <filename>classopen_p_m_d_1_1benchmark_1_1_memory_profiler.html</filename>
    <member kind="function">
      <type></type>
      <name>MemoryProfiler</name>
      <anchorfile>classopen_p_m_d_1_1benchmark_1_1_memory_profiler.html</anchorfile>
      <anchor>a278320ae34226b8ccc30e8fbc649540c</anchor>
      <arglist>(int rank, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Display</name>
      <anchorfile>classopen_p_m_d_1_1benchmark_1_1_memory_profiler.html</anchorfile>
      <anchor>ab5bbc087418cac18021075267c131a29</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::Mesh</name>
    <filename>classopen_p_m_d_1_1_mesh.html</filename>
    <base>BaseRecord&lt; MeshRecordComponent &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>Geometry</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>acee3512164b9df9b3549bac0aa782383</anchor>
      <arglist></arglist>
      <enumvalue file="classopen_p_m_d_1_1_mesh.html" anchor="acee3512164b9df9b3549bac0aa782383a7949e6c02de2124dcdddd71b5430b8f0">cartesian</enumvalue>
      <enumvalue file="classopen_p_m_d_1_1_mesh.html" anchor="acee3512164b9df9b3549bac0aa782383a3cb27f337f55476a9237d86999c1831a">thetaMode</enumvalue>
      <enumvalue file="classopen_p_m_d_1_1_mesh.html" anchor="acee3512164b9df9b3549bac0aa782383ab39ab2f08bff50d6e6fb1c33ca5a9d9f">cylindrical</enumvalue>
      <enumvalue file="classopen_p_m_d_1_1_mesh.html" anchor="acee3512164b9df9b3549bac0aa782383a6683a3be9c0472d8c680cc93a424c198">spherical</enumvalue>
      <enumvalue file="classopen_p_m_d_1_1_mesh.html" anchor="acee3512164b9df9b3549bac0aa782383a795f3202b17cb6bc3d4b771d8c6c9eaf">other</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataOrder</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>af28bf48368071545c77bb981b8c89009</anchor>
      <arglist></arglist>
      <enumvalue file="classopen_p_m_d_1_1_mesh.html" anchor="af28bf48368071545c77bb981b8c89009a0d61f8370cad1d412f80b84d143e1257">C</enumvalue>
      <enumvalue file="classopen_p_m_d_1_1_mesh.html" anchor="af28bf48368071545c77bb981b8c89009a800618943025315f869e4e1f09471012">F</enumvalue>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a07eb782f1699f9529c95bff10fc5359c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>geometryString</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a00086979ecf2ef9dd8579c28facd8409</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Mesh &amp;</type>
      <name>setGeometry</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a9cc80dbac1828bcbe184a5151fa9df66</anchor>
      <arglist>(Geometry g)</arglist>
    </member>
    <member kind="function">
      <type>Mesh &amp;</type>
      <name>setGeometry</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a5ef4081230eec6e12a0501eb157d8664</anchor>
      <arglist>(std::string geometry)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>geometryParameters</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a7c5925d7a1bfe05933755a18f493cdca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Mesh &amp;</type>
      <name>setGeometryParameters</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>ae966faeaebfe042dfb52dfe263aefd46</anchor>
      <arglist>(std::string const &amp;geometryParameters)</arglist>
    </member>
    <member kind="function">
      <type>DataOrder</type>
      <name>dataOrder</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a663f0fa9345e38cdb1aa6d9cc142f5c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Mesh &amp;</type>
      <name>setDataOrder</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a94368675f0c441e592a32291a838ee60</anchor>
      <arglist>(DataOrder dor)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>axisLabels</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a2110593f508bed04469b05a4f35e5c28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Mesh &amp;</type>
      <name>setAxisLabels</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a112c856717ce9ba2db4a3c7d6f2be6ca</anchor>
      <arglist>(std::vector&lt; std::string &gt; const &amp;axisLabels)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>gridSpacing</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a5c527dac1682ccc79b244be0d421651f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Mesh &amp;</type>
      <name>setGridSpacing</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a7aeb2e581678ace58ddbb6543c775573</anchor>
      <arglist>(std::vector&lt; T &gt; const &amp;gridSpacing)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>gridGlobalOffset</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>ab92f91200b12c81a1aff9aa4b0e3f6f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Mesh &amp;</type>
      <name>setGridGlobalOffset</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>ab9742155b79d297b5443a98a27a24811</anchor>
      <arglist>(std::vector&lt; double &gt; const &amp;gridGlobalOffset)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gridUnitSI</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>abfb4f72d428aa66a4cdc2d4b4b9d5381</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Mesh &amp;</type>
      <name>setGridUnitSI</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a7217080554dbedd41f96dda6029cdf07</anchor>
      <arglist>(double gridUnitSI)</arglist>
    </member>
    <member kind="function">
      <type>Mesh &amp;</type>
      <name>setUnitDimension</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>ae5f7a2da964388dc22c23a9f4281fe76</anchor>
      <arglist>(std::map&lt; UnitDimension, double &gt; const &amp;unitDimension)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>timeOffset</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a3affbfe83950d8b584d02de3e2e0574c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Mesh &amp;</type>
      <name>setTimeOffset</name>
      <anchorfile>classopen_p_m_d_1_1_mesh.html</anchorfile>
      <anchor>a80793377c9408006c8c334f03348d24f</anchor>
      <arglist>(T timeOffset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::MeshRecordComponent</name>
    <filename>classopen_p_m_d_1_1_mesh_record_component.html</filename>
    <base>openPMD::RecordComponent</base>
    <member kind="function">
      <type></type>
      <name>MeshRecordComponent</name>
      <anchorfile>classopen_p_m_d_1_1_mesh_record_component.html</anchorfile>
      <anchor>a0a7f07ce717052b326b83ebec76c5299</anchor>
      <arglist>(BaseRecord&lt; MeshRecordComponent &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt;</type>
      <name>position</name>
      <anchorfile>classopen_p_m_d_1_1_mesh_record_component.html</anchorfile>
      <anchor>a51d657cef843cb2bca5d00cac4a4f429</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MeshRecordComponent &amp;</type>
      <name>setPosition</name>
      <anchorfile>classopen_p_m_d_1_1_mesh_record_component.html</anchorfile>
      <anchor>a1959f3436e75013d813fff4a0aa1044c</anchor>
      <arglist>(std::vector&lt; T &gt; pos)</arglist>
    </member>
    <member kind="function">
      <type>MeshRecordComponent &amp;</type>
      <name>makeConstant</name>
      <anchorfile>classopen_p_m_d_1_1_mesh_record_component.html</anchorfile>
      <anchor>ac84ac07308455105e3d339033a3fabbb</anchor>
      <arglist>(T)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::MPIBenchmark</name>
    <filename>classopen_p_m_d_1_1_m_p_i_benchmark.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MPIBenchmark</name>
      <anchorfile>classopen_p_m_d_1_1_m_p_i_benchmark.html</anchorfile>
      <anchor>aa73496c31fd9ce11f6ae62d52dd66f4f</anchor>
      <arglist>(std::string basePath, Extent tExtent, std::shared_ptr&lt; BlockSlicer &gt; blockSlicer, DatasetFillerProvider dfp, MPI_Comm comm=MPI_COMM_WORLD)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfiguration</name>
      <anchorfile>classopen_p_m_d_1_1_m_p_i_benchmark.html</anchorfile>
      <anchor>a5c182958826be818285ba0bac60bde98</anchor>
      <arglist>(std::string jsonConfig, std::string backend, Datatype dt, Series::IterationIndex_t iterations, int threadSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addConfiguration</name>
      <anchorfile>classopen_p_m_d_1_1_m_p_i_benchmark.html</anchorfile>
      <anchor>a67c37b10e00971ad2d6c9d54f5e37c60</anchor>
      <arglist>(std::string jsonConfig, std::string backend, Datatype dt, Series::IterationIndex_t iterations)</arglist>
    </member>
    <member kind="function">
      <type>MPIBenchmarkReport&lt; typename Clock::duration &gt;</type>
      <name>runBenchmark</name>
      <anchorfile>classopen_p_m_d_1_1_m_p_i_benchmark.html</anchorfile>
      <anchor>ae2d499c9ff1a92a5ca86a1f318f0fd70</anchor>
      <arglist>(int rootThread=0)</arglist>
    </member>
    <member kind="variable">
      <type>Extent</type>
      <name>totalExtent</name>
      <anchorfile>classopen_p_m_d_1_1_m_p_i_benchmark.html</anchorfile>
      <anchor>a98b45a51e0aed506aa805b8551fc5867</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::MPIBenchmarkReport</name>
    <filename>structopen_p_m_d_1_1_m_p_i_benchmark_report.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>addReport</name>
      <anchorfile>structopen_p_m_d_1_1_m_p_i_benchmark_report.html</anchorfile>
      <anchor>ac05e15f602666947f832ffc54e30f40f</anchor>
      <arglist>(int rootThread, std::string jsonConfig, std::string extension, int threadSize, Datatype dt, Series::IterationIndex_t iterations, std::pair&lt; Duration, Duration &gt; const &amp;report)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Duration, Duration &gt;</type>
      <name>getReport</name>
      <anchorfile>structopen_p_m_d_1_1_m_p_i_benchmark_report.html</anchorfile>
      <anchor>afa3b4fd04d0b203480d7c9484d171661</anchor>
      <arglist>(int rank, std::string jsonConfig, std::string extension, int threadSize, Datatype dt, Series::IterationIndex_t iterations)</arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::tuple&lt; int, std::string, std::string, int, Datatype, Series::IterationIndex_t &gt;, std::pair&lt; Duration, Duration &gt; &gt;</type>
      <name>durations</name>
      <anchorfile>structopen_p_m_d_1_1_m_p_i_benchmark_report.html</anchorfile>
      <anchor>a9165375673e64863f5eeb228f69c4253</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::Attributable::MyPath</name>
    <filename>structopen_p_m_d_1_1_attributable_1_1_my_path.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>filePath</name>
      <anchorfile>structopen_p_m_d_1_1_attributable_1_1_my_path.html</anchorfile>
      <anchor>a21021d065d35c6da3c8a101dc3c33a8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>openPMDPath</name>
      <anchorfile>structopen_p_m_d_1_1_attributable_1_1_my_path.html</anchorfile>
      <anchor>ae1bf27a0b97bf2acdc7c4a41e5de79f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>seriesName</name>
      <anchorfile>structopen_p_m_d_1_1_attributable_1_1_my_path.html</anchorfile>
      <anchor>a293f495ca4a9c1d30a87c6748b4c2133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>seriesExtension</name>
      <anchorfile>structopen_p_m_d_1_1_attributable_1_1_my_path.html</anchorfile>
      <anchor>a6dc2361ab7cf2f89b1f4c0d919ff2f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>group</name>
      <anchorfile>structopen_p_m_d_1_1_attributable_1_1_my_path.html</anchorfile>
      <anchor>aaef4725fcf019770987ef043de5f097a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::Attributable::NoInit</name>
    <filename>structopen_p_m_d_1_1_attributable_1_1_no_init.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::error::NoSuchAttribute</name>
    <filename>classopen_p_m_d_1_1error_1_1_no_such_attribute.html</filename>
    <base>openPMD::Error</base>
  </compound>
  <compound kind="class">
    <name>openPMD::OneDimensionalBlockSlicer</name>
    <filename>classopen_p_m_d_1_1_one_dimensional_block_slicer.html</filename>
    <base>openPMD::BlockSlicer</base>
    <member kind="function">
      <type>std::pair&lt; Offset, Extent &gt;</type>
      <name>sliceBlock</name>
      <anchorfile>classopen_p_m_d_1_1_one_dimensional_block_slicer.html</anchorfile>
      <anchor>a78a64f2d309473c225bd543b5673d756</anchor>
      <arglist>(Extent &amp;totalExtent, int size, int rank) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD_PyMPICommObject</name>
    <filename>structopen_p_m_d___py_m_p_i_comm_object.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::error::OperationUnsupportedInBackend</name>
    <filename>classopen_p_m_d_1_1error_1_1_operation_unsupported_in_backend.html</filename>
    <base>openPMD::Error</base>
  </compound>
  <compound kind="class">
    <name>openPMD::auxiliary::OutOfRangeMsg</name>
    <filename>classopen_p_m_d_1_1auxiliary_1_1_out_of_range_msg.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::GET_BUFFER_VIEW &gt;::OutParameters</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_g_e_t___b_u_f_f_e_r___v_i_e_w_01_4_1_1_out_parameters.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::overloaded</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1overloaded.html</filename>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="class">
    <name>openPMD::ParallelHDF5IOHandler</name>
    <filename>classopen_p_m_d_1_1_parallel_h_d_f5_i_o_handler.html</filename>
    <base>openPMD::AbstractIOHandler</base>
    <member kind="function">
      <type>std::string</type>
      <name>backendName</name>
      <anchorfile>classopen_p_m_d_1_1_parallel_h_d_f5_i_o_handler.html</anchorfile>
      <anchor>adc62d3dd553b41440a41d6ee78e7c23c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>flush</name>
      <anchorfile>classopen_p_m_d_1_1_parallel_h_d_f5_i_o_handler.html</anchorfile>
      <anchor>ab651b0c4ba4bb8d422e1cc8205ce6698</anchor>
      <arglist>(internal::ParsedFlushParams &amp;) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::ParallelHDF5IOHandlerImpl</name>
    <filename>classopen_p_m_d_1_1_parallel_h_d_f5_i_o_handler_impl.html</filename>
    <base>openPMD::HDF5IOHandlerImpl</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter</name>
    <filename>structopen_p_m_d_1_1_parameter.html</filename>
    <templarg></templarg>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::ADVANCE &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_a_d_v_a_n_c_e_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
    <member kind="variable">
      <type>AdvanceMode</type>
      <name>mode</name>
      <anchorfile>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_a_d_v_a_n_c_e_01_4.html</anchorfile>
      <anchor>a66e8d3954b80e0ace812493349551e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; AdvanceStatus &gt;</type>
      <name>status</name>
      <anchorfile>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_a_d_v_a_n_c_e_01_4.html</anchorfile>
      <anchor>adb9606da9924e89db8e37b6dde384605</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::AVAILABLE_CHUNKS &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_a_v_a_i_l_a_b_l_e___c_h_u_n_k_s_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::CHECK_FILE &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_c_h_e_c_k___f_i_l_e_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::CLOSE_FILE &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_c_l_o_s_e___f_i_l_e_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::CLOSE_PATH &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_c_l_o_s_e___p_a_t_h_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::CREATE_DATASET &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_c_r_e_a_t_e___d_a_t_a_s_e_t_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>warnUnusedParameters</name>
      <anchorfile>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_c_r_e_a_t_e___d_a_t_a_s_e_t_01_4.html</anchorfile>
      <anchor>a812d7b8e429e21793752cc8c1a10f304</anchor>
      <arglist>(TracingJSON &amp;, std::string const &amp;currentBackendName, std::string const &amp;warningMessage)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::CREATE_FILE &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_c_r_e_a_t_e___f_i_l_e_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::CREATE_PATH &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_c_r_e_a_t_e___p_a_t_h_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::DELETE_ATT &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_d_e_l_e_t_e___a_t_t_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::DELETE_DATASET &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_d_e_l_e_t_e___d_a_t_a_s_e_t_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::DELETE_FILE &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_d_e_l_e_t_e___f_i_l_e_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::DELETE_PATH &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_d_e_l_e_t_e___p_a_t_h_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::DEREGISTER &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_d_e_r_e_g_i_s_t_e_r_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::EXTEND_DATASET &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_e_x_t_e_n_d___d_a_t_a_s_e_t_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::GET_BUFFER_VIEW &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_g_e_t___b_u_f_f_e_r___v_i_e_w_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
    <class kind="struct">openPMD::Parameter&lt; Operation::GET_BUFFER_VIEW &gt;::OutParameters</class>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::LIST_ATTS &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_l_i_s_t___a_t_t_s_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::LIST_DATASETS &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_l_i_s_t___d_a_t_a_s_e_t_s_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::LIST_PATHS &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_l_i_s_t___p_a_t_h_s_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::OPEN_DATASET &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_o_p_e_n___d_a_t_a_s_e_t_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::OPEN_FILE &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_o_p_e_n___f_i_l_e_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::OPEN_PATH &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_o_p_e_n___p_a_t_h_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::READ_ATT &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_r_e_a_d___a_t_t_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::READ_DATASET &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_r_e_a_d___d_a_t_a_s_e_t_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::WRITE_ATT &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_w_r_i_t_e___a_t_t_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::Parameter&lt; Operation::WRITE_DATASET &gt;</name>
    <filename>structopen_p_m_d_1_1_parameter_3_01_operation_1_1_w_r_i_t_e___d_a_t_a_s_e_t_01_4.html</filename>
    <base>openPMD::AbstractParameter</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::json::ParsedConfig</name>
    <filename>structopen_p_m_d_1_1json_1_1_parsed_config.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::internal::ParsedFlushParams</name>
    <filename>structopen_p_m_d_1_1internal_1_1_parsed_flush_params.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::Series::ParsedInput</name>
    <filename>structopen_p_m_d_1_1_series_1_1_parsed_input.html</filename>
  </compound>
  <compound kind="class">
    <name>openpmd_api::pipe::__main__::particle_patch_load</name>
    <filename>classopenpmd__api_1_1pipe_1_1____main_____1_1particle__patch__load.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::ParticlePatches</name>
    <filename>classopen_p_m_d_1_1_particle_patches.html</filename>
    <base>Container&lt; PatchRecord &gt;</base>
  </compound>
  <compound kind="class">
    <name>openPMD::ParticleSpecies</name>
    <filename>classopen_p_m_d_1_1_particle_species.html</filename>
    <base>Container&lt; Record &gt;</base>
  </compound>
  <compound kind="class">
    <name>openPMD::PatchRecord</name>
    <filename>classopen_p_m_d_1_1_patch_record.html</filename>
    <base>BaseRecord&lt; PatchRecordComponent &gt;</base>
  </compound>
  <compound kind="class">
    <name>openPMD::PatchRecordComponent</name>
    <filename>classopen_p_m_d_1_1_patch_record_component.html</filename>
    <base>openPMD::RecordComponent</base>
    <member kind="function">
      <type></type>
      <name>PatchRecordComponent</name>
      <anchorfile>classopen_p_m_d_1_1_patch_record_component.html</anchorfile>
      <anchor>a5688788455779c3ea07b52e4e50092fd</anchor>
      <arglist>(BaseRecord&lt; PatchRecordComponent &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>PatchRecordComponent &amp;</type>
      <name>resetDataset</name>
      <anchorfile>classopen_p_m_d_1_1_patch_record_component.html</anchorfile>
      <anchor>afd61b2e2d90646191dfe5943a705d329</anchor>
      <arglist>(Dataset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classopen_p_m_d_1_1_patch_record_component.html</anchorfile>
      <anchor>a572a6541fe56834fcd8277d55b0545a6</anchor>
      <arglist>(std::shared_ptr&lt; T &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openpmd_api::pipe::__main__::pipe</name>
    <filename>classopenpmd__api_1_1pipe_1_1____main_____1_1pipe.html</filename>
  </compound>
  <compound kind="struct">
    <name>PythonDynamicMemoryView</name>
    <filename>struct_python_dynamic_memory_view.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::RandomDatasetFiller</name>
    <filename>classopen_p_m_d_1_1_random_dataset_filler.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>DatasetFiller&lt; typename Distr::result_type &gt;</base>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>produceData</name>
      <anchorfile>classopen_p_m_d_1_1_random_dataset_filler.html</anchorfile>
      <anchor>abdac1cc38327c79e9ede4a4069f3cf88</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferMode</name>
      <anchorfile>classopen_p_m_d_1_1_random_dataset_filler.html</anchorfile>
      <anchor>a4f7772f0052614fdcec7428341710148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNumberOfItems</name>
      <anchorfile>classopen_p_m_d_1_1_random_dataset_filler.html</anchorfile>
      <anchor>af75ff722e137574604133e41e8606efb</anchor>
      <arglist>(Extent::value_type numItems) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RandomDatasetFiller&lt; X, T &gt;</type>
      <name>makeRandomDatasetFiller</name>
      <anchorfile>classopen_p_m_d_1_1_random_dataset_filler.html</anchorfile>
      <anchor>a218a6e16868a0bc16ce995901fb79c21</anchor>
      <arglist>(Extent::value_type numberOfItems, typename X::result_type lower, typename X::result_type upper)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::error::ReadError</name>
    <filename>classopen_p_m_d_1_1error_1_1_read_error.html</filename>
    <base>openPMD::Error</base>
  </compound>
  <compound kind="class">
    <name>openPMD::ReadIterations</name>
    <filename>classopen_p_m_d_1_1_read_iterations.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::Record</name>
    <filename>classopen_p_m_d_1_1_record.html</filename>
    <base>BaseRecord&lt; RecordComponent &gt;</base>
  </compound>
  <compound kind="class">
    <name>openPMD::RecordComponent</name>
    <filename>classopen_p_m_d_1_1_record_component.html</filename>
    <base>openPMD::BaseRecordComponent</base>
    <member kind="function">
      <type></type>
      <name>RecordComponent</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a7c50af92833a013a1203b9900b86691d</anchor>
      <arglist>(BaseRecord&lt; RecordComponent &gt; const &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RecordComponent &amp;</type>
      <name>resetDataset</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a46d6a63567b78c54bd549e29bd9e34d6</anchor>
      <arglist>(Dataset)</arglist>
    </member>
    <member kind="function">
      <type>RecordComponent &amp;</type>
      <name>makeConstant</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>ae39f03feb929f83a107aea07fee1554b</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>RecordComponent &amp;</type>
      <name>makeEmpty</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a1d97c680c31aff1bfbd98bf371b74e9b</anchor>
      <arglist>(uint8_t dimensions)</arglist>
    </member>
    <member kind="function">
      <type>RecordComponent &amp;</type>
      <name>makeEmpty</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a70ca1e37b0bb53085822a9a62f075419</anchor>
      <arglist>(Datatype dt, uint8_t dimensions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a57b860fb618fda3473cf73856eb54900</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>loadChunk</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>ada76373cd902fdbee409d6e9c7a58432</anchor>
      <arglist>(Offset={0u}, Extent={-1u})</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr_dataset_types</type>
      <name>loadChunkVariant</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>abc66d510870db2d4a5249ab0d7c1402f</anchor>
      <arglist>(Offset={0u}, Extent={-1u})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadChunk</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a3290d6dd76ac7b51e5548fd92d2e7d2d</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; data, Offset offset, Extent extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadChunk</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a03712a57ffe2f64be6944a50efc92a33</anchor>
      <arglist>(std::shared_ptr&lt; T[]&gt; data, Offset offset, Extent extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadChunkRaw</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>ae3232354495f984f87266ad8cf738bdb</anchor>
      <arglist>(T *data, Offset offset, Extent extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeChunk</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a8b6a586c1e620957cab56d447b2eb10d</anchor>
      <arglist>(std::shared_ptr&lt; T &gt; data, Offset offset, Extent extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeChunk</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>adf475a33747bbd935937981535ee846c</anchor>
      <arglist>(std::shared_ptr&lt; T[]&gt; data, Offset offset, Extent extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeChunk</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a1e314e9bb95b4dc2fe088e7e7f383557</anchor>
      <arglist>(UniquePtrWithLambda&lt; T &gt; data, Offset offset, Extent extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeChunk</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>ac81cd4f02ef9f4ddb7a11e3f96f3581d</anchor>
      <arglist>(std::unique_ptr&lt; T, Del &gt; data, Offset offset, Extent extent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeChunkRaw</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>ad188c2f735ce37cd7d6e93010c816a13</anchor>
      <arglist>(T *data, Offset offset, Extent extent)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; auxiliary::IsContiguousContainer_v&lt; T_ContiguousContainer &gt; &gt;</type>
      <name>storeChunk</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a82ede44741678a33e84012d1e9aeb734</anchor>
      <arglist>(T_ContiguousContainer &amp;data, Offset offset={0u}, Extent extent={-1u})</arglist>
    </member>
    <member kind="function">
      <type>DynamicMemoryView&lt; T &gt;</type>
      <name>storeChunk</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a2095e50310818275de277a237ff6d9ea</anchor>
      <arglist>(Offset offset, Extent extent, F &amp;&amp;createBuffer)</arglist>
    </member>
    <member kind="function">
      <type>DynamicMemoryView&lt; T &gt;</type>
      <name>storeChunk</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>aea0febc979407d1c9b64fea920febe47</anchor>
      <arglist>(Offset, Extent)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>visit</name>
      <anchorfile>classopen_p_m_d_1_1_record_component.html</anchorfile>
      <anchor>a551edb6d81d005b871b930c5f85ef916</anchor>
      <arglist>(Args &amp;&amp;...args) -&gt; decltype(Visitor::template call&lt; char &gt;(std::declval&lt; RecordComponent &amp; &gt;(), std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::internal::RecordComponentData</name>
    <filename>classopen_p_m_d_1_1internal_1_1_record_component_data.html</filename>
    <base>openPMD::internal::BaseRecordComponentData</base>
    <member kind="variable">
      <type>std::queue&lt; IOTask &gt;</type>
      <name>m_chunks</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_record_component_data.html</anchorfile>
      <anchor>a6954a9770a1241fdc9fd83fad980063a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Attribute</type>
      <name>m_constantValue</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_record_component_data.html</anchorfile>
      <anchor>ac3803fe2bc0d5ed04f2a7f7e18988aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_record_component_data.html</anchorfile>
      <anchor>aefc045e6a4e6ee87cbfaceb221ddd5cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_isEmpty</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_record_component_data.html</anchorfile>
      <anchor>aca07a28cba00fbdc0bec68104beda3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_hasBeenExtended</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_record_component_data.html</anchorfile>
      <anchor>a63cd8a6e866d765a3e40642bc879d6dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::RetrieveBlocksInfo</name>
    <filename>structopen_p_m_d_1_1detail_1_1_retrieve_blocks_info.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::RunUniquePtrPut</name>
    <filename>structopen_p_m_d_1_1detail_1_1_run_unique_ptr_put.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::internal::ScalarIterator</name>
    <filename>classopen_p_m_d_1_1internal_1_1_scalar_iterator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ScalarIterator</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_scalar_iterator.html</anchorfile>
      <anchor>ac0c2edadb04fb6564306cf1b3bdc3e58</anchor>
      <arglist>(Other const &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::Series</name>
    <filename>classopen_p_m_d_1_1_series.html</filename>
    <base>openPMD::Attributable</base>
    <class kind="struct">openPMD::Series::ParsedInput</class>
    <member kind="typedef">
      <type>Iteration::IterationIndex_t</type>
      <name>IterationIndex_t</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a4b2516b7577ce74d40ff2a9454006967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::SeriesData::IterationsContainer_t</type>
      <name>IterationsContainer_t</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>afbe60d63f11665e48420ef831df6d51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Series</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ab0c2dcc27c642613d2a761b71ededa2f</anchor>
      <arglist>(std::string const &amp;filepath, Access at, MPI_Comm comm, std::string const &amp;options=&quot;{}&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Series</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a6addd07ddbb863226166c5b507d2b81b</anchor>
      <arglist>(std::string const &amp;filepath, Access at, std::string const &amp;options=&quot;{}&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ae8cec59e5035819f16da5594f98283c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>openPMD</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a74de3952d21ba3245c625a0234d327b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setOpenPMD</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a6fb58a814b5c75a4859463eb3728050f</anchor>
      <arglist>(std::string const &amp;openPMD)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>openPMDextension</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>aa2324db0f43a0f4170a78f1a1af677da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setOpenPMDextension</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ae59da50a036fafda686302042fc9d45c</anchor>
      <arglist>(uint32_t openPMDextension)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>basePath</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a422273507ae9975bc243a055e853bb1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setBasePath</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>aad0de23bab4db9577fa9640df4461dce</anchor>
      <arglist>(std::string const &amp;basePath)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>meshesPath</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a91780a57a1efe1ede0a321f7a2363702</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setMeshesPath</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a221b5ee2bc5ff1afb7dfec9e8e4b0168</anchor>
      <arglist>(std::string const &amp;meshesPath)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>particlesPath</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ad65ceae3c8879dd15cd98da74f1c9ace</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setParticlesPath</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a52f769645da59107c3ad693314c2461f</anchor>
      <arglist>(std::string const &amp;particlesPath)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>author</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a8b24202eb309e5472a0c943fd30cd04d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setAuthor</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a775496da0351d3bfdf0408265f9032e9</anchor>
      <arglist>(std::string const &amp;author)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>software</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>aa03dbe04b302718a1c83bde7b1238571</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setSoftware</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ae0c789b5920eadff57319ed990c817b5</anchor>
      <arglist>(std::string const &amp;newName, std::string const &amp;newVersion=std::string(&quot;unspecified&quot;))</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>softwareVersion</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a0f91bc5b3f39cdb29582ddbdb65c967b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setSoftwareVersion</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a81c494552c448615f3c5cfa91d329483</anchor>
      <arglist>(std::string const &amp;softwareVersion)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>date</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a5a44c1afb82634d549527dcbb09b58c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setDate</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>addb8c27fa4e869cf77a6bf8a68a2ea84</anchor>
      <arglist>(std::string const &amp;date)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>softwareDependencies</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ae534af928b5668b26e2e99d3c78651c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setSoftwareDependencies</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a4795015e422eb4a7f02783a398cd7e4b</anchor>
      <arglist>(std::string const &amp;newSoftwareDependencies)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>machine</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a597548567575d6fbc6dbd96006a53320</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setMachine</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a9b931aa753b96cdecc5746d13a045f28</anchor>
      <arglist>(std::string const &amp;newMachine)</arglist>
    </member>
    <member kind="function">
      <type>IterationEncoding</type>
      <name>iterationEncoding</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>afc35e40f2021ccfd9cfe6184afbb9e4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setIterationEncoding</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ae85ba0248ceea284628ab605d77748c7</anchor>
      <arglist>(IterationEncoding iterationEncoding)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>iterationFormat</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a22686e124d1253bdb54e545999fd08d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setIterationFormat</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>afe9b974cd85678c4df076a18e46fcfe3</anchor>
      <arglist>(std::string const &amp;iterationFormat)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ae045dcfe12292f5c5edeef37ea594336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Series &amp;</type>
      <name>setName</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a03ef644fcec0c243d0ae0b7003afd737</anchor>
      <arglist>(std::string const &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>backend</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a6651d5d00f85598aa5b2c378b719b45d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a28bd83eda4f2853f0c517face12c9bc1</anchor>
      <arglist>(std::string backendConfig=&quot;{}&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ReadIterations</type>
      <name>readIterations</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ae588f6b20138c5ee03a2657038e42fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseBase</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a40235cd21c48b276117f024e2bb9ae25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WriteIterations</type>
      <name>writeIterations</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a64b4ef6e4cd903c19040cfc593088f95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a67dde95d567c5d48a04b3c4c09f49f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseJsonOptions</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ab87d7c8a55d02422938c6d224c418fda</anchor>
      <arglist>(TracingJSON &amp;options, ParsedInput &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::future&lt; void &gt;</type>
      <name>flush_impl</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a55ae5a048524b7af078a5301c9194dad</anchor>
      <arglist>(iterations_iterator begin, iterations_iterator end, internal::FlushParams const &amp;flushParams, bool flushIOHandler=true)</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::deque&lt; IterationIndex_t &gt; &gt;</type>
      <name>readGorVBased</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a20301ade16db27465ad95535d0183e0c</anchor>
      <arglist>(bool do_always_throw_errors, bool init, std::set&lt; IterationIndex_t &gt; const &amp;ignoreIterations={})</arglist>
    </member>
    <member kind="function">
      <type>iterations_iterator</type>
      <name>indexOf</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a4aec51fab92e0748f0260fe2e994249a</anchor>
      <arglist>(Iteration const &amp;)</arglist>
    </member>
    <member kind="function">
      <type>AdvanceStatus</type>
      <name>advance</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>ad85fd75e0a5f7ee3c130c6983c19637a</anchor>
      <arglist>(AdvanceMode mode, internal::AttributableData &amp;file, iterations_iterator it, Iteration &amp;iteration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flushStep</name>
      <anchorfile>classopen_p_m_d_1_1_series.html</anchorfile>
      <anchor>a731de43e009479595ad5483f26459182</anchor>
      <arglist>(bool doFlush)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::internal::SeriesData</name>
    <filename>classopen_p_m_d_1_1internal_1_1_series_data.html</filename>
    <base>openPMD::internal::AttributableData</base>
    <member kind="variable">
      <type>std::optional&lt; WriteIterations &gt;</type>
      <name>m_writeIterations</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>a66f12fdf1d3b90782194a551fa9901b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; SeriesIterator &gt;</type>
      <name>m_sharedStatefulIterator</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>a3b74989ae019ea432fafec479b629913</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::set&lt; IterationIndex_t &gt;</type>
      <name>m_currentlyActiveIterations</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>a2ffcf82114ccfdc163f54a51b931807a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; std::string &gt;</type>
      <name>m_overrideFilebasedFilename</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>a49a1e6f7b351c3fb8e0393bfa4fc26f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_name</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>a6ab9c8bb413da51d7f0a73277c723ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_filenamePrefix</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>a2e34ce77dfdfc89de19367fe7f33c10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_filenamePostfix</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>a9131464752b50dd1d2f86c428bf81f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>m_filenameExtension</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>acc859f5573cccccb39d1feaeafb21f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_filenamePadding</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>aad84b72af0c0a47a911d7b5eb581df13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IterationEncoding</type>
      <name>m_iterationEncoding</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>acec5911051d2195c1708401a513b6594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Format</type>
      <name>m_format</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>afcd9ec75e4d4ba87665b19ae5d6b79da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StepStatus</type>
      <name>m_stepStatus</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>a4f8bde7486bf555d2224e3f282f21500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_parseLazily</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>aadcd543348ee03515db9976f3df8fa83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>m_wroteAtLeastOneIOStep</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>aba91dda4a1bfd94da26d3378fa07f0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; ParsePreference &gt;</type>
      <name>m_parsePreference</name>
      <anchorfile>classopen_p_m_d_1_1internal_1_1_series_data.html</anchorfile>
      <anchor>a8ac8388506b29d0e34bcf0dbd2667039</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::SeriesIterator</name>
    <filename>classopen_p_m_d_1_1_series_iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>SeriesIterator</name>
      <anchorfile>classopen_p_m_d_1_1_series_iterator.html</anchorfile>
      <anchor>a8b0041b4e5025c34897ea01b087e3ed4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SeriesIteratorPythonAdaptor</name>
    <filename>struct_series_iterator_python_adaptor.html</filename>
    <base>openPMD::SeriesIterator</base>
  </compound>
  <compound kind="struct">
    <name>SetAttributeFromObject</name>
    <filename>struct_set_attribute_from_object.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::SimpleDatasetFillerProvider</name>
    <filename>classopen_p_m_d_1_1_simple_dataset_filler_provider.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>openPMD::Span</name>
    <filename>classopen_p_m_d_1_1_span.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>openPMD::benchmark::Timer</name>
    <filename>classopen_p_m_d_1_1benchmark_1_1_timer.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classopen_p_m_d_1_1benchmark_1_1_timer.html</anchorfile>
      <anchor>ac5fd9a36d9270abad8a335aeaa22a5cc</anchor>
      <arglist>(const std::string &amp;tag, int rank, TimePoint progStart)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::ToDatatype</name>
    <filename>structopen_p_m_d_1_1detail_1_1_to_datatype.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::ToDatatypeHelper</name>
    <filename>structopen_p_m_d_1_1detail_1_1_to_datatype_helper.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::ToDatatypeHelper&lt; bool &gt;</name>
    <filename>structopen_p_m_d_1_1detail_1_1_to_datatype_helper_3_01bool_01_4.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::ToDatatypeHelper&lt; std::array&lt; T, n &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1detail_1_1_to_datatype_helper_3_01std_1_1array_3_01_t_00_01n_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::ToDatatypeHelper&lt; std::vector&lt; T &gt; &gt;</name>
    <filename>structopen_p_m_d_1_1detail_1_1_to_datatype_helper_3_01std_1_1vector_3_01_t_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::ToVectorType</name>
    <filename>structopen_p_m_d_1_1detail_1_1_to_vector_type.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>openPMD::json::TracingJSON</name>
    <filename>classopen_p_m_d_1_1json_1_1_tracing_j_s_o_n.html</filename>
    <member kind="function">
      <type>nlohmann::json &amp;</type>
      <name>json</name>
      <anchorfile>classopen_p_m_d_1_1json_1_1_tracing_j_s_o_n.html</anchorfile>
      <anchor>a307c6698c01b3f1a0b298a0ad12ba1dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>nlohmann::json const  &amp;</type>
      <name>getShadow</name>
      <anchorfile>classopen_p_m_d_1_1json_1_1_tracing_j_s_o_n.html</anchorfile>
      <anchor>aeb63035dc3903ab89f8118d4c9955c0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>nlohmann::json</type>
      <name>invertShadow</name>
      <anchorfile>classopen_p_m_d_1_1json_1_1_tracing_j_s_o_n.html</anchorfile>
      <anchor>a3ebbf197b43157e6ef6ef3f1f8a4ac19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>declareFullyRead</name>
      <anchorfile>classopen_p_m_d_1_1json_1_1_tracing_j_s_o_n.html</anchorfile>
      <anchor>a380bf690346673d19ab6c0c40b406e40</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::UniquePtrWithLambda</name>
    <filename>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>UniquePtrWithLambda</name>
      <anchorfile>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</anchorfile>
      <anchor>aa1930588f1e0ed2f3c156e68e7324c3b</anchor>
      <arglist>(std::unique_ptr&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniquePtrWithLambda</name>
      <anchorfile>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</anchorfile>
      <anchor>a960c21df22992ef52280679ec5470df6</anchor>
      <arglist>(std::unique_ptr&lt; T, Del &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniquePtrWithLambda</name>
      <anchorfile>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</anchorfile>
      <anchor>a46550012ce032dbd71ab7a4f1f21f6a8</anchor>
      <arglist>(T_decayed *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniquePtrWithLambda</name>
      <anchorfile>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</anchorfile>
      <anchor>a5ef03b96efbc2454b4c42820b0bed4c8</anchor>
      <arglist>(T_decayed *, std::function&lt; void(T_decayed *)&gt;)</arglist>
    </member>
    <member kind="function">
      <type>UniquePtrWithLambda&lt; U &gt;</type>
      <name>static_cast_</name>
      <anchorfile>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</anchorfile>
      <anchor>ad0e6c83df553568416b87db70b7822b1</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UniquePtrWithLambda&lt; void &gt;</name>
    <filename>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</filename>
    <member kind="function">
      <type></type>
      <name>UniquePtrWithLambda</name>
      <anchorfile>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</anchorfile>
      <anchor>aa1930588f1e0ed2f3c156e68e7324c3b</anchor>
      <arglist>(std::unique_ptr&lt; void &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniquePtrWithLambda</name>
      <anchorfile>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</anchorfile>
      <anchor>a960c21df22992ef52280679ec5470df6</anchor>
      <arglist>(std::unique_ptr&lt; void, Del &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniquePtrWithLambda</name>
      <anchorfile>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</anchorfile>
      <anchor>a46550012ce032dbd71ab7a4f1f21f6a8</anchor>
      <arglist>(T_decayed *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UniquePtrWithLambda</name>
      <anchorfile>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</anchorfile>
      <anchor>a5ef03b96efbc2454b4c42820b0bed4c8</anchor>
      <arglist>(T_decayed *, std::function&lt; void(T_decayed *)&gt;)</arglist>
    </member>
    <member kind="function">
      <type>UniquePtrWithLambda&lt; U &gt;</type>
      <name>static_cast_</name>
      <anchorfile>classopen_p_m_d_1_1_unique_ptr_with_lambda.html</anchorfile>
      <anchor>ad0e6c83df553568416b87db70b7822b1</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::UpdateSpan</name>
    <filename>structopen_p_m_d_1_1detail_1_1_update_span.html</filename>
    <templarg></templarg>
    <base>openPMD::detail::I_UpdateSpan</base>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::VariableDefiner</name>
    <filename>structopen_p_m_d_1_1detail_1_1_variable_definer.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>call</name>
      <anchorfile>structopen_p_m_d_1_1detail_1_1_variable_definer.html</anchorfile>
      <anchor>a5fd150ed0a1b877d7c4b726a88d32914</anchor>
      <arglist>(adios2::IO &amp;IO, std::string const &amp;name, std::vector&lt; ADIOS2IOHandlerImpl::ParameterizedOperator &gt; const &amp;compressions, adios2::Dims const &amp;shape=adios2::Dims(), adios2::Dims const &amp;start=adios2::Dims(), adios2::Dims const &amp;count=adios2::Dims(), bool const constantDims=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::auxiliary::Variant</name>
    <filename>classopen_p_m_d_1_1auxiliary_1_1_variant.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classopen_p_m_d_1_1auxiliary_1_1_variant.html</anchorfile>
      <anchor>aaf9f2e697fb63ae1639354bb2fd144d3</anchor>
      <arglist>(resource r)</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>get</name>
      <anchorfile>classopen_p_m_d_1_1auxiliary_1_1_variant.html</anchorfile>
      <anchor>a8438a09982c81308a08f6228a2238f8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>resource</type>
      <name>getResource</name>
      <anchorfile>classopen_p_m_d_1_1auxiliary_1_1_variant.html</anchorfile>
      <anchor>ab6db5b1cb5d52aba40b5dc03e9bdf930</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>index</name>
      <anchorfile>classopen_p_m_d_1_1auxiliary_1_1_variant.html</anchorfile>
      <anchor>a5ff5216efe5b126ffb8bd088c29da7f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Variant&lt; Datatype, attribute_types &gt;</name>
    <filename>classopen_p_m_d_1_1auxiliary_1_1_variant.html</filename>
    <member kind="function">
      <type></type>
      <name>Variant</name>
      <anchorfile>classopen_p_m_d_1_1auxiliary_1_1_variant.html</anchorfile>
      <anchor>aaf9f2e697fb63ae1639354bb2fd144d3</anchor>
      <arglist>(resource r)</arglist>
    </member>
    <member kind="function">
      <type>U</type>
      <name>get</name>
      <anchorfile>classopen_p_m_d_1_1auxiliary_1_1_variant.html</anchorfile>
      <anchor>a8438a09982c81308a08f6228a2238f8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>resource</type>
      <name>getResource</name>
      <anchorfile>classopen_p_m_d_1_1auxiliary_1_1_variant.html</anchorfile>
      <anchor>ab6db5b1cb5d52aba40b5dc03e9bdf930</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>index</name>
      <anchorfile>classopen_p_m_d_1_1auxiliary_1_1_variant.html</anchorfile>
      <anchor>a5ff5216efe5b126ffb8bd088c29da7f1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::Writable</name>
    <filename>classopen_p_m_d_1_1_writable.html</filename>
    <member kind="function">
      <type>void</type>
      <name>seriesFlush</name>
      <anchorfile>classopen_p_m_d_1_1_writable.html</anchorfile>
      <anchor>a72cf72e1890ea78cfb7a63ba240b633b</anchor>
      <arglist>(std::string backendConfig=&quot;{}&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dirtySelf</name>
      <anchorfile>classopen_p_m_d_1_1_writable.html</anchorfile>
      <anchor>a998e248dbdd9b1f51b2f776772048cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>dirtyRecursive</name>
      <anchorfile>classopen_p_m_d_1_1_writable.html</anchorfile>
      <anchor>a845ec2c55fa2ce2b8436477f134b3f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>ownKeyWithinParent</name>
      <anchorfile>classopen_p_m_d_1_1_writable.html</anchorfile>
      <anchor>a5ef8a26da6cc7a4fbd5ed93779baad4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>written</name>
      <anchorfile>classopen_p_m_d_1_1_writable.html</anchorfile>
      <anchor>a18ade2a3bdc573820b4253a099af2ee0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::auxiliary::WriteBuffer</name>
    <filename>structopen_p_m_d_1_1auxiliary_1_1_write_buffer.html</filename>
  </compound>
  <compound kind="struct">
    <name>openPMD::detail::WriteDataset</name>
    <filename>structopen_p_m_d_1_1detail_1_1_write_dataset.html</filename>
  </compound>
  <compound kind="class">
    <name>openPMD::WriteIterations</name>
    <filename>classopen_p_m_d_1_1_write_iterations.html</filename>
    <member kind="function">
      <type>std::optional&lt; IndexedIteration &gt;</type>
      <name>currentIteration</name>
      <anchorfile>classopen_p_m_d_1_1_write_iterations.html</anchorfile>
      <anchor>a1da72ea23deb21333756c7d4e712edf2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>openPMD::WrittenChunkInfo</name>
    <filename>structopen_p_m_d_1_1_written_chunk_info.html</filename>
    <base>openPMD::ChunkInfo</base>
    <member kind="variable">
      <type>unsigned int</type>
      <name>sourceID</name>
      <anchorfile>structopen_p_m_d_1_1_written_chunk_info.html</anchorfile>
      <anchor>a98a6b8c4a54ff58e47e30a333d6d8965</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>openPMD::error::WrongAPIUsage</name>
    <filename>classopen_p_m_d_1_1error_1_1_wrong_a_p_i_usage.html</filename>
    <base>openPMD::Error</base>
  </compound>
  <compound kind="namespace">
    <name>openPMD</name>
    <filename>namespaceopen_p_m_d.html</filename>
    <namespace>openPMD::internal</namespace>
    <class kind="class">openPMD::UniquePtrWithLambda</class>
    <class kind="class">openPMD::Attributable</class>
    <class kind="class">openPMD::Attribute</class>
    <class kind="class">openPMD::BaseRecord</class>
    <class kind="class">openPMD::BaseRecordComponent</class>
    <class kind="class">openPMD::Container</class>
    <class kind="class">openPMD::MeshRecordComponent</class>
    <class kind="class">openPMD::PatchRecord</class>
    <class kind="class">openPMD::PatchRecordComponent</class>
    <class kind="class">openPMD::AbstractIOHandlerImplCommon</class>
    <class kind="class">openPMD::Span</class>
    <class kind="class">openPMD::Writable</class>
    <class kind="class">openPMD::BlockSlicer</class>
    <class kind="class">openPMD::DatasetFiller</class>
    <class kind="class">openPMD::SimpleDatasetFillerProvider</class>
    <class kind="class">openPMD::MPIBenchmark</class>
    <class kind="struct">openPMD::MPIBenchmarkReport</class>
    <class kind="class">openPMD::OneDimensionalBlockSlicer</class>
    <class kind="class">openPMD::RandomDatasetFiller</class>
    <class kind="struct">openPMD::ChunkInfo</class>
    <class kind="struct">openPMD::WrittenChunkInfo</class>
    <class kind="class">openPMD::Dataset</class>
    <class kind="struct">openPMD::decay_equiv</class>
    <class kind="class">openPMD::Error</class>
    <class kind="class">openPMD::AbstractFilePosition</class>
    <class kind="class">openPMD::AbstractIOHandler</class>
    <class kind="class">openPMD::AbstractIOHandlerImpl</class>
    <class kind="struct">openPMD::ADIOS2FilePosition</class>
    <class kind="class">openPMD::ADIOS2IOHandlerImpl</class>
    <class kind="class">openPMD::ADIOS2IOHandler</class>
    <class kind="class">openPMD::DummyIOHandler</class>
    <class kind="struct">openPMD::GetH5DataType</class>
    <class kind="struct">openPMD::HDF5FilePosition</class>
    <class kind="class">openPMD::HDF5IOHandler</class>
    <class kind="class">openPMD::HDF5IOHandlerImpl</class>
    <class kind="class">openPMD::ParallelHDF5IOHandler</class>
    <class kind="class">openPMD::ParallelHDF5IOHandlerImpl</class>
    <class kind="struct">openPMD::InvalidatableFile</class>
    <class kind="struct">openPMD::AbstractParameter</class>
    <class kind="struct">openPMD::Parameter</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::CREATE_FILE &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::CHECK_FILE &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::OPEN_FILE &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::CLOSE_FILE &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::DELETE_FILE &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::CREATE_PATH &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::CLOSE_PATH &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::OPEN_PATH &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::DELETE_PATH &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::LIST_PATHS &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::CREATE_DATASET &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::EXTEND_DATASET &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::OPEN_DATASET &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::DELETE_DATASET &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::WRITE_DATASET &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::READ_DATASET &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::LIST_DATASETS &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::GET_BUFFER_VIEW &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::DELETE_ATT &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::WRITE_ATT &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::READ_ATT &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::LIST_ATTS &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::ADVANCE &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::AVAILABLE_CHUNKS &gt;</class>
    <class kind="struct">openPMD::Parameter&lt; Operation::DEREGISTER &gt;</class>
    <class kind="class">openPMD::IOTask</class>
    <class kind="struct">openPMD::JSONFilePosition</class>
    <class kind="class">openPMD::JSONIOHandler</class>
    <class kind="struct">openPMD::File</class>
    <class kind="class">openPMD::JSONIOHandlerImpl</class>
    <class kind="class">openPMD::Iteration</class>
    <class kind="class">openPMD::IndexedIteration</class>
    <class kind="class">openPMD::Mesh</class>
    <class kind="class">openPMD::ParticlePatches</class>
    <class kind="class">openPMD::ParticleSpecies</class>
    <class kind="class">openPMD::SeriesIterator</class>
    <class kind="class">openPMD::ReadIterations</class>
    <class kind="class">openPMD::Record</class>
    <class kind="class">openPMD::DynamicMemoryView</class>
    <class kind="class">openPMD::RecordComponent</class>
    <class kind="class">openPMD::Series</class>
    <class kind="class">openPMD::WriteIterations</class>
    <member kind="typedef">
      <type>error::ReadError</type>
      <name>no_such_file_error</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a5b2424ecd22845d4d58232b027d06921</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>error::OperationUnsupportedInBackend</type>
      <name>unsupported_data_error</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a8cd6d400a0ef29106f279e177789a08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>error::NoSuchAttribute</type>
      <name>no_such_attribute_error</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>ab9f8679ce247b45e1654d491c22b78a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Datatype</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>ac04f58bb14b584a3685793e5b29ccd00</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a027acd3aa6b1dd7f26119d3cf0f9a063">CHAR</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a56283e7d906f746d62e95c8ba7814c3f">UCHAR</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00abc620627445205cf5e799c51375bae9a">SCHAR</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00aa35c2b02966b1563e5bf7b81b8b0cf77">SHORT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a53f93baa3057821107c750323892fa92">INT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00ac1fabfea54ec6011e694f211f3ffebf3">LONG</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00adeeed35101214b62ebabd7bf71f27ab1">LONGLONG</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00ab8627cc5bae17ed1687bb487a4d70a3e">USHORT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a3351504090a741e69da641a42e00da80">UINT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a0edad1cd854da1f522d2a35119917e84">ULONG</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a95e833dae5108813951d3805ab594c65">ULONGLONG</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00ae738c26bf4ce1037fa81b039a915cbf6">FLOAT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00afd3e4ece78a7d422280d5ed379482229">DOUBLE</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00aa30ec41f6da736498c907ffd7b0a082b">LONG_DOUBLE</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a28231ca81c97f72edef77170622ed773">CFLOAT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a0ae1755148242e588a5335edbbf98ae3">CDOUBLE</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a116b9719fdd398c39773d4c7ee37f120">CLONG_DOUBLE</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a63b588d5559f64f89a416e656880b949">STRING</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a6cf164d0d2f99b2cdf191a23a586e7b5">VEC_CHAR</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a96d5c36f6235b71c59fec9d63c8b8c5a">VEC_SHORT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a15f9410ec61efeae594e2a8f2643973a">VEC_INT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00add1e806513e6543c91df8298988c3b33">VEC_LONG</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a1cef90f9474a21d6e6cfc7cc7cde67ab">VEC_LONGLONG</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a836344c1465df0054d99df52e97791d3">VEC_UCHAR</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00ab515df580d2caf947f251c10de40b190">VEC_USHORT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a880d97419a18d61f9c84eb1f69f50e00">VEC_UINT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00aa463121ebbb26061993d74e239b84ab6">VEC_ULONG</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00ae80c1d98b5ba51f5c7f93b6f5051db9e">VEC_ULONGLONG</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00ac7fd6e61d48ca94faa2775ca5582fbcf">VEC_FLOAT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00aecda80cad07d2404582e60f274c09680">VEC_DOUBLE</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a9508f862e482218ce235fa46cdbbe471">VEC_LONG_DOUBLE</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00ab4340b6134d4bbb82604e075b3bfa2c1">VEC_CFLOAT</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a874a956bb2812eb7b78ba1ea1bbc8199">VEC_CDOUBLE</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a4ac3292dbd43fd00f7b1e28bfef36262">VEC_CLONG_DOUBLE</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a054f18fcf8236b565dbdf8e728d5e8d2">VEC_SCHAR</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00aed481095e43fac179cad5233d3f9c645">VEC_STRING</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a958726cda7a227c1b5808182511e8d0e">ARR_DBL_7</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00aa97b2c144243b2b9d2c593ec268b62f5">BOOL</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="ac04f58bb14b584a3685793e5b29ccd00a0db45d2a4141101bdfe48e3314cfbca3">UNDEFINED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FlushLevel</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a669fff503a31d85e9f91945c33cf39f9</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a669fff503a31d85e9f91945c33cf39f9aff6f10e7003655cf3a02b528b4993a3d">UserFlush</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a669fff503a31d85e9f91945c33cf39f9ada1e0af0851f992af15f8837cb34b087">InternalFlush</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a669fff503a31d85e9f91945c33cf39f9a2614fd85a8ca09a58c13f4d6a61c6188">SkeletonOnly</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a669fff503a31d85e9f91945c33cf39f9a4854f8c56ae523a92f32b580f82d4420">CreateOrOpenFiles</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Access</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a132624db0c6ac134d7a6084ab6d07e1e</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a132624db0c6ac134d7a6084ab6d07e1ea47c7e7cb36a953a8c47e02000036bb44">READ_ONLY</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a132624db0c6ac134d7a6084ab6d07e1ea6c7daeae6756bee504827104fe74a7e8">READ_RANDOM_ACCESS</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a132624db0c6ac134d7a6084ab6d07e1ea9567e7073c7eab35a02f1766e7543077">READ_LINEAR</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a132624db0c6ac134d7a6084ab6d07e1eaa7b843fb734e3b3fea8e5f902d3f4144">READ_WRITE</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a132624db0c6ac134d7a6084ab6d07e1ea294ce20cdefa29be3be0735cb62e715d">CREATE</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a132624db0c6ac134d7a6084ab6d07e1ea375ffb668aa90f1c7fcae55e9734a752">APPEND</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Format</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a7dc2b05c997920a65ff9297e52f3286d</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a7dc2b05c997920a65ff9297e52f3286da86459eb6a9c3edb9d09e9d6fe8d5b9fa">HDF5</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a7dc2b05c997920a65ff9297e52f3286da2bf6c434644daba9aeac67835f8a1b1f">ADIOS2_BP</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a7dc2b05c997920a65ff9297e52f3286daabfa1e61c953d875a527446ed9202aa9">ADIOS2_BP4</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a7dc2b05c997920a65ff9297e52f3286da561331123c9e4e7d101ff276b9fbcde6">ADIOS2_BP5</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a7dc2b05c997920a65ff9297e52f3286da7a3c59603827b79fe55ca263bbe20bf4">ADIOS2_SST</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a7dc2b05c997920a65ff9297e52f3286da4edc8b74b917b5f01ae1816a2735ce06">ADIOS2_SSC</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a7dc2b05c997920a65ff9297e52f3286da0ecd11c1d7a287401d148a23bbd7a2f8">JSON</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a7dc2b05c997920a65ff9297e52f3286da301ecec76b3c1f17d5f6ade0e6ec29d5">TOML</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a7dc2b05c997920a65ff9297e52f3286dac942dc2a9f958acddc67e11472d3ca0b">GENERIC</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a7dc2b05c997920a65ff9297e52f3286dabd2103035a8021942390a78a431ba0c4">DUMMY</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>IterationEncoding</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a836aa9398502263fb423787947bf4ff8</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a836aa9398502263fb423787947bf4ff8a6025426e0d272a016bbd83f0ba3aa406">fileBased</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a836aa9398502263fb423787947bf4ff8a55cf3ec07531beedb97d9e062e745d00">groupBased</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a836aa9398502263fb423787947bf4ff8a2d4fb4fc5ae28c5e19c0a9423701097e">variableBased</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AdvanceStatus</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a3f85fd5d90639b5642911697a53183d0</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a3f85fd5d90639b5642911697a53183d0ae0aa021e21dddbd6d8cecec71e9cf564">OK</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a3f85fd5d90639b5642911697a53183d0a1bb417e796672d15256a5b51d9b554ae">OVER</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a3f85fd5d90639b5642911697a53183d0a352ee9e03f0f5a7f7a39124f13c9cab9">RANDOMACCESS</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AdvanceMode</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a1549bb191480b2383a8bdc55da639449</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a1549bb191480b2383a8bdc55da639449ae95df0804b778d3f77ffd138e6eb6510">BEGINSTEP</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a1549bb191480b2383a8bdc55da639449a8a5ea2ee8a7c32056669b9703c21838d">ENDSTEP</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StepStatus</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a26f08f98f53b66e47caddfb7e68ab74c</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a26f08f98f53b66e47caddfb7e68ab74ca5b82cd5c6d19174a7b19e9314d3aceb5">DuringStep</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a26f08f98f53b66e47caddfb7e68ab74ca2999cbcd313f7c3b0c0ec2c17ac38c04">NoStep</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnitDimension</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a5bd35872ff3aaacc1ec2700443d89c40</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a5bd35872ff3aaacc1ec2700443d89c40ad20caec3b48a1eef164cb4ca81ba2587">L</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a5bd35872ff3aaacc1ec2700443d89c40a69691c7bdcc3ce6d5d8a1361f22d04ac">M</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a5bd35872ff3aaacc1ec2700443d89c40ab9ece18c950afbfa6b0fdbfa4ff731d3">T</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a5bd35872ff3aaacc1ec2700443d89c40add7536794b63bf90eccfd37f9b147d7f">I</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a5bd35872ff3aaacc1ec2700443d89c40a61a74be60d291cc4678ab46cc1cdaf91">theta</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a5bd35872ff3aaacc1ec2700443d89c40a8d9c307cb7f3c4a32822a51922d1ceaa">N</enumvalue>
      <enumvalue file="namespaceopen_p_m_d.html" anchor="a5bd35872ff3aaacc1ec2700443d89c40aff44570aca8241914870afbc310cdb85">J</enumvalue>
    </member>
    <member kind="function">
      <type>std::vector&lt; Datatype &gt;</type>
      <name>openPMD_Datatypes</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a777baa5e8e4e60338be57f4248ad1814</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Datatype</type>
      <name>basicDatatype</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>aed98a0d6afbbfda7c19c6917fc7ab411</anchor>
      <arglist>(Datatype dt)</arglist>
    </member>
    <member kind="function">
      <type>Format</type>
      <name>determineFormat</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a420a5759359f40443a64a1466d42b5f6</anchor>
      <arglist>(std::string const &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>suffix</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>ae85ac121e561aace5e433173de458068</anchor>
      <arglist>(Format f)</arglist>
    </member>
    <member kind="function">
      <type>Datatype</type>
      <name>dtype_from_bufferformat</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>abc8e0b5f39fece9dd2b1e188d897261b</anchor>
      <arglist>(std::string const &amp;fmt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_pickle</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a596f7d1cc2cd0322959b9bd72ae4165d</anchor>
      <arglist>(pybind11::class_&lt; T_Args... &gt; &amp;cl, T_SeriesAccessor &amp;&amp;seriesAccessor)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Datatype</type>
      <name>determineDatatype</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>afe65b949ebf732236933c8f01468c0e7</anchor>
      <arglist>(T &amp;&amp;val)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>toBytes</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a9b670ad71d6e80073a7d8fb689b1fd4a</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>toBits</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a31ccc9b338d37af8c6bbbcf4f53dfeee</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a1ba5e10b9852d6f900b1998d974fef04</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFloatingPoint</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a86e4ef028c30b981759878dcf3202a75</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isComplexFloatingPoint</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a6053fa8fcb7ac587c09a3e55eccb38a7</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFloatingPoint</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a6326cd3db5c72ce757d0fdc4fd30d21d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isComplexFloatingPoint</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>abd895ed7c642b854e6acf893ed8b7a6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; bool, bool &gt;</type>
      <name>isInteger</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a8a5452229585fd2faddb98cb6cc8eeb2</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; bool, bool &gt;</type>
      <name>isInteger</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a7cbe0903eb1486ef6e0d2e19121fd2e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameFloatingPoint</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a1e0c5a7cd758d4f0e2495639da8496a3</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameComplexFloatingPoint</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a2d77cb0d3393504e417aea6ad1ae9a58</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameInteger</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>aae1011a1acfc03c4914f0a6e2d3443a9</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>isChar</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a6671a06e7cd20d5c746c5b3001606886</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>isSameChar</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a1dbd6bfb5c072398ec1c5406a6409090</anchor>
      <arglist>(Datatype d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSame</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a97abc0c52f6828a3ce8f8a01bdd4a9fe</anchor>
      <arglist>(openPMD::Datatype const d, openPMD::Datatype const e)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>switchType</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>ac5eac046c98c4a0e6a51141e3423207d</anchor>
      <arglist>(Datatype dt, Args &amp;&amp;...args) -&gt; decltype(Action::template call&lt; char &gt;(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>switchNonVectorType</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>ad747f28c9b62c1d1fee3992cef375c47</anchor>
      <arglist>(Datatype dt, Args &amp;&amp;...args) -&gt; decltype(Action::template call&lt; char &gt;(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>switchDatasetType</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>af4588b39ed64dba9e07bdf60ea5e5400</anchor>
      <arglist>(Datatype dt, Args &amp;&amp;...args) -&gt; decltype(Action::template call&lt; char &gt;(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractIOHandler &gt;</type>
      <name>createIOHandler</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a99683c8b5a2ca2cde6bdffc83dc1096e</anchor>
      <arglist>(std::string path, Access access, Format format, std::string originalExtension, MPI_Comm comm, JSON options, std::string const &amp;pathAsItWasSpecifiedInTheConstructor)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; AbstractIOHandler &gt;</type>
      <name>createIOHandler</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a18e761b67877604a646a45ec46fab276</anchor>
      <arglist>(std::string path, Access access, Format format, std::string originalExtension, JSON options, std::string const &amp;pathAsItWasSpecifiedInTheConstructor)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>switchAdios2AttributeType</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>aed2efa86920614da1f07806bc7a69ba0</anchor>
      <arglist>(Datatype dt, Args &amp;&amp;...args) -&gt; decltype(Action::template call&lt; char &gt;(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>switchAdios2VariableType</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a3629b99eb73bd3b2c43b602cfc4938c7</anchor>
      <arglist>(Datatype dt, Args &amp;&amp;...args) -&gt; decltype(Action::template call&lt; char &gt;(std::forward&lt; Args &gt;(args)...))</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; hsize_t &gt;</type>
      <name>getOptimalChunkDims</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a411c14c5f25a65ad51f6b2e392239215</anchor>
      <arglist>(std::vector&lt; hsize_t &gt; const &amp;dims, size_t const typeSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OPENPMDAPI_EXPORT_ENUM_CLASS</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>aeb6750b56f2fc2b3316f8dd95db64e31</anchor>
      <arglist>(Operation)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getVersion</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>a684c17f1fdd0f9d04e1a92aa0efc52cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getStandard</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>af3f8b29a6c7b24f34c2383080bc325bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getStandardMinimum</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>acfa97da38a96cab56c67724443cf6378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, bool &gt;</type>
      <name>getVariants</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>ad291085916d366b26abe1c66ac6504e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getFileExtensions</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>ae8176cb8239cebea4ec25cf4230fecc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>shareRaw</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>aff4c79bb2b12ae065b20dbd550e0b930</anchor>
      <arglist>(T *x)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>shareRaw</name>
      <anchorfile>namespaceopen_p_m_d.html</anchorfile>
      <anchor>aff4c79bb2b12ae065b20dbd550e0b930</anchor>
      <arglist>(T *x)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>openPMD::internal</name>
    <filename>namespaceopen_p_m_d_1_1internal.html</filename>
    <class kind="class">openPMD::internal::AttributableData</class>
    <class kind="class">openPMD::internal::BaseRecordData</class>
    <class kind="class">openPMD::internal::ScalarIterator</class>
    <class kind="class">openPMD::internal::BaseRecordComponentData</class>
    <class kind="class">openPMD::internal::EraseStaleEntries</class>
    <class kind="class">openPMD::internal::ContainerData</class>
    <class kind="struct">openPMD::internal::FlushParams</class>
    <class kind="struct">openPMD::internal::ParsedFlushParams</class>
    <class kind="struct">openPMD::internal::DeferredParseAccess</class>
    <class kind="class">openPMD::internal::IterationData</class>
    <class kind="class">openPMD::internal::RecordComponentData</class>
    <class kind="class">openPMD::internal::SeriesData</class>
    <member kind="enumeration">
      <type></type>
      <name>SeriesStatus</name>
      <anchorfile>namespaceopen_p_m_d_1_1internal.html</anchorfile>
      <anchor>a5fac8bf8bc0ac3fcf18f3472c4b9e5b6</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d_1_1internal.html" anchor="a5fac8bf8bc0ac3fcf18f3472c4b9e5b6a7a1920d61156abc05a60135aefe8bc67">Default</enumvalue>
      <enumvalue file="namespaceopen_p_m_d_1_1internal.html" anchor="a5fac8bf8bc0ac3fcf18f3472c4b9e5b6a8b08e51f06fabcbfa16942fbff59ab29">Parsing</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CloseStatus</name>
      <anchorfile>namespaceopen_p_m_d_1_1internal.html</anchorfile>
      <anchor>ad11a2f65f1518e3a2ac8bda1bb063aa3</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceopen_p_m_d_1_1internal.html" anchor="ad11a2f65f1518e3a2ac8bda1bb063aa3a903906f737f87c24b81774dd5daf3bd4">ParseAccessDeferred</enumvalue>
      <enumvalue file="namespaceopen_p_m_d_1_1internal.html" anchor="ad11a2f65f1518e3a2ac8bda1bb063aa3ac3bf447eabe632720a3aa1a7ce401274">Open</enumvalue>
      <enumvalue file="namespaceopen_p_m_d_1_1internal.html" anchor="ad11a2f65f1518e3a2ac8bda1bb063aa3ab918ec176481bddaf9449d23cc4307de">ClosedInFrontend</enumvalue>
      <enumvalue file="namespaceopen_p_m_d_1_1internal.html" anchor="ad11a2f65f1518e3a2ac8bda1bb063aa3a7c09b9df50e937b3efe30f3f12da9ee5">ClosedInBackend</enumvalue>
      <enumvalue file="namespaceopen_p_m_d_1_1internal.html" anchor="ad11a2f65f1518e3a2ac8bda1bb063aa3a4b54db6f1247a770867b1e10b8553d69">ClosedTemporarily</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>openpmd_api::DaskArray</name>
    <filename>namespaceopenpmd__api_1_1_dask_array.html</filename>
    <class kind="class">openpmd_api::DaskArray::DaskRecordComponent</class>
    <member kind="function">
      <type>def</type>
      <name>record_component_to_daskarray</name>
      <anchorfile>namespaceopenpmd__api_1_1_dask_array.html</anchorfile>
      <anchor>a61e6d1a46378adecdaba11fe24d44fd1</anchor>
      <arglist>(record_component, chunks=None)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>openpmd_api::DaskDataFrame</name>
    <filename>namespaceopenpmd__api_1_1_dask_data_frame.html</filename>
    <member kind="function">
      <type>def</type>
      <name>particles_to_daskdataframe</name>
      <anchorfile>namespaceopenpmd__api_1_1_dask_data_frame.html</anchorfile>
      <anchor>a428cf6198b054a5d9e37ea50928dce25</anchor>
      <arglist>(particle_species)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>openpmd_api::DataFrame</name>
    <filename>namespaceopenpmd__api_1_1_data_frame.html</filename>
    <member kind="function">
      <type>def</type>
      <name>particles_to_dataframe</name>
      <anchorfile>namespaceopenpmd__api_1_1_data_frame.html</anchorfile>
      <anchor>a12e3cfcdc325a461b255de47717603da</anchor>
      <arglist>(particle_species, slice=None)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>openpmd_api::ls</name>
    <filename>namespaceopenpmd__api_1_1ls.html</filename>
  </compound>
  <compound kind="namespace">
    <name>openpmd_api::pipe</name>
    <filename>namespaceopenpmd__api_1_1pipe.html</filename>
  </compound>
  <compound kind="namespace">
    <name>pipe</name>
    <filename>namespacepipe.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>C++ &amp; Python API for Scientific I/O with openPMD</title>
    <filename>index.html</filename>
    <docanchor file="index.html">md__home_docs_checkouts_readthedocs_org_user_builds_openpmd_api_checkouts_latest_README</docanchor>
  </compound>
</tagfile>
